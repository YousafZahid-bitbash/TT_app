{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './InventoryTracker.css';\n\n// const InventoryTracker = () => {\n//   const [brands, setBrands] = useState([]);\n//   const [selectedBrand, setSelectedBrand] = useState('');\n//   const [skus, setSkus] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [source, setSource] = useState('database');\n//   const [alertLoading, setAlertLoading] = useState({});\n\n//   const API_BASE = 'http://localhost:8000';\n\n//   // Fetch brands on component mount\n//   useEffect(() => {\n//     fetchBrands();\n//   }, []);\n\n//   // Fetch SKUs when brand changes or source changes\n//   useEffect(() => {\n//     if (selectedBrand) {\n//       fetchSkus(selectedBrand);\n//     }\n//   }, [selectedBrand, source]);\n\n//   const fetchBrands = async () => {\n//     try {\n//       const response = await fetch(`${API_BASE}/inventory/brands`);\n//       const data = await response.json();\n//       if (data.status === 'success') {\n//         setBrands(data.brands);\n//         if (data.brands.length > 0) {\n//           setSelectedBrand(data.brands[0].id.toString());\n//         }\n//       }\n//     } catch (error) {\n//       console.error('Error fetching brands:', error);\n//     }\n//   };\n\n//   const fetchSkus = async (brandId) => {\n//     setLoading(true);\n//     try {\n//       let url;\n//       if (source === 'tiktok') {\n//         // Fetch from TikTok API\n//         url = `${API_BASE}/inventory/check-stock?brand_id=${brandId}&send_alerts=false&source=tiktok`;\n//       } else {\n//         // Fetch from database\n//         url = `${API_BASE}/inventory/skus?brand_id=${brandId}`;\n//       }\n\n//       const response = await fetch(url);\n//       const data = await response.json();\n\n//       if (data.status === 'success') {\n//         if (source === 'tiktok') {\n//           // Transform TikTok data to match expected format\n//           const transformedSkus = data.low_stock_items.map(item => ({\n//             id: item.sku_id,\n//             name: item.sku_name,\n//             stock_count: item.current_stock,\n//             low_stock_threshold: item.threshold,\n//             brand_id: item.brand_id\n//           }));\n//           setSkus(transformedSkus);\n//         } else {\n//           setSkus(data.skus);\n//         }\n//       }\n//     } catch (error) {\n//       console.error('Error fetching SKUs:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const updateStock = async (skuId, newStock) => {\n//     try {\n//       const response = await fetch(\n//         `${API_BASE}/inventory/update-stock?sku_id=${skuId}&stock_count=${newStock}`,\n//         { method: 'POST' }\n//       );\n//       const data = await response.json();\n\n//       if (data.status === 'success') {\n//         fetchSkus(selectedBrand); // Refresh SKUs\n//         alert('Stock updated successfully!');\n//       } else {\n//         alert('Failed to update stock: ' + data.message);\n//       }\n//     } catch (error) {\n//       console.error('Error updating stock:', error);\n//       alert('Error updating stock');\n//     }\n//   };\n\n//   const updateThreshold = async (skuId, newThreshold) => {\n//     try {\n//       const response = await fetch(\n//         `${API_BASE}/inventory/update-threshold?sku_id=${skuId}&threshold=${newThreshold}`,\n//         { method: 'POST' }\n//       );\n//       const data = await response.json();\n\n//       if (data.status === 'success') {\n//         fetchSkus(selectedBrand); // Refresh SKUs\n//         alert('Threshold updated successfully!');\n//       } else {\n//         alert('Failed to update threshold: ' + data.message);\n//       }\n//     } catch (error) {\n//       console.error('Error updating threshold:', error);\n//       alert('Error updating threshold');\n//     }\n//   };\n\n//   const sendSlackAlert = async (sku) => {\n//     const skuId = sku.id;\n//     setAlertLoading(prev => ({ ...prev, [skuId]: true }));\n\n//     try {\n//       const alertData = {\n//         brand_id: selectedBrand,\n//         sku_id: skuId,\n//         sku_name: sku.name,\n//         current_stock: sku.stock_count,\n//         threshold: sku.low_stock_threshold,\n//         alert_level: sku.stock_count === 0 ? 'out_of_stock' : 'low_stock',\n//         priority: sku.stock_count === 0 ? 'high' : 'medium'\n//       };\n\n//       const response = await fetch(\n//         `${API_BASE}/inventory/send-alert`,\n//         {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(alertData)\n//         }\n//       );\n\n//       const data = await response.json();\n\n//       if (data.status === 'success') {\n//         alert(`✅ Slack alert sent successfully for ${sku.name}!`);\n//       } else {\n//         alert(`❌ Failed to send alert: ${data.message}`);\n//       }\n//     } catch (error) {\n//       console.error('Error sending Slack alert:', error);\n//       alert('❌ Error sending Slack alert');\n//     } finally {\n//       setAlertLoading(prev => ({ ...prev, [skuId]: false }));\n//     }\n//   };\n\n//   const getStockStatus = (stock, threshold) => {\n//     if (stock === 0) return 'out-of-stock';\n//     if (stock <= threshold) return 'low-stock';\n//     return 'in-stock';\n//   };\n\n//   const getStockStatusColor = (status) => {\n//     switch (status) {\n//       case 'out-of-stock': return '#dc3545';\n//       case 'low-stock': return '#ffc107';\n//       case 'in-stock': return '#28a745';\n//       default: return '#6c757d';\n//     }\n//   };\n\n//   const getStockStatusText = (status) => {\n//     switch (status) {\n//       case 'out-of-stock': return '🚨 Out of Stock';\n//       case 'low-stock': return '⚠️ Low Stock';\n//       case 'in-stock': return '✅ In Stock';\n//       default: return '❓ Unknown';\n//     }\n//   };\n\n//   return (\n//     <div className=\"inventory-tracker-simple\">\n//       {/* Header */}\n//       <div className=\"inventory-header\">\n//         <div className=\"header-left\">\n//           <h1>📦 Inventory Tracker</h1>\n//           <p className=\"subtitle\">Monitor and manage your inventory levels</p>\n//         </div>\n\n//         <div className=\"header-controls\">\n//           <div className=\"control-group\">\n//             <label>Brand:</label>\n//             <select \n//               value={selectedBrand} \n//               onChange={(e) => setSelectedBrand(e.target.value)}\n//               className=\"brand-selector\"\n//             >\n//               <option value=\"\">Select Brand</option>\n//               {brands.map(brand => (\n//                 <option key={brand.id} value={brand.id}>\n//                   {brand.name}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n\n//           <div className=\"control-group\">\n//             <label>Data Source:</label>\n//             <select \n//               value={source} \n//               onChange={(e) => setSource(e.target.value)}\n//               className=\"source-selector\"\n//             >\n//               <option value=\"database\">📊 Database</option>\n//               <option value=\"tiktok\">🛍️ TikTok API</option>\n//             </select>\n//           </div>\n\n//           <button \n//             onClick={() => fetchSkus(selectedBrand)} \n//             className=\"btn btn-refresh\"\n//             disabled={loading || !selectedBrand}\n//           >\n//             {loading ? '🔄 Loading...' : '🔄 Refresh'}\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Data Source Info */}\n//       <div className=\"data-source-info\">\n//         <div className={`source-indicator ${source}`}>\n//           <span className=\"source-icon\">\n//             {source === 'tiktok' ? '🛍️' : '📊'}\n//           </span>\n//           <span className=\"source-text\">\n//             {source === 'tiktok' \n//               ? 'Live data from TikTok Shop API' \n//               : 'Data from local database'}\n//           </span>\n//         </div>\n//         {source === 'database' && (\n//           <small className=\"source-note\">\n//             💡 Switch to TikTok API for real-time inventory data\n//           </small>\n//         )}\n//       </div>\n\n//       {/* Inventory Table */}\n//       <div className=\"table-container\">\n//         {loading ? (\n//           <div className=\"loading-state\">\n//             <div className=\"spinner\"></div>\n//             <p>Loading inventory data...</p>\n//           </div>\n//         ) : skus.length === 0 ? (\n//           <div className=\"empty-state\">\n//             <div className=\"empty-icon\">📦</div>\n//             <h3>No inventory data found</h3>\n//             <p>\n//               {!selectedBrand \n//                 ? 'Please select a brand to view inventory.'\n//                 : 'No SKUs found for the selected brand.'}\n//             </p>\n//           </div>\n//         ) : (\n//           <table className=\"inventory-table\">\n//             <thead>\n//               <tr>\n//                 <th>SKU Name</th>\n//                 <th>Current Stock</th>\n//                 <th>Threshold</th>\n//                 <th>Status</th>\n//                 <th>Actions</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {skus.map(sku => {\n//                 const status = getStockStatus(sku.stock_count, sku.low_stock_threshold);\n//                 const isAlertLoading = alertLoading[sku.id];\n\n//                 return (\n//                   <tr key={sku.id} className={`sku-row ${status}`}>\n//                     <td className=\"sku-name\">\n//                       <div className=\"sku-info\">\n//                         <strong>{sku.name}</strong>\n//                         <small>ID: {sku.id}</small>\n//                       </div>\n//                     </td>\n\n//                     <td className=\"stock-count\">\n//                       <input\n//                         type=\"number\"\n//                         value={sku.stock_count}\n//                         onChange={(e) => {\n//                           const newStock = parseInt(e.target.value) || 0;\n//                           updateStock(sku.id, newStock);\n//                         }}\n//                         className=\"stock-input\"\n//                         min=\"0\"\n//                         disabled={source === 'tiktok'} // Can't edit TikTok data\n//                       />\n//                     </td>\n\n//                     <td className=\"threshold\">\n//                       <input\n//                         type=\"number\"\n//                         value={sku.low_stock_threshold}\n//                         onChange={(e) => {\n//                           const newThreshold = parseInt(e.target.value) || 0;\n//                           updateThreshold(sku.id, newThreshold);\n//                         }}\n//                         className=\"threshold-input\"\n//                         min=\"0\"\n//                         disabled={source === 'tiktok'} // Can't edit TikTok data\n//                       />\n//                     </td>\n\n//                     <td className=\"status\">\n//                       <span \n//                         className=\"status-indicator\"\n//                         style={{ backgroundColor: getStockStatusColor(status) }}\n//                       >\n//                         {getStockStatusText(status)}\n//                       </span>\n//                     </td>\n\n//                     <td className=\"actions\">\n//                       <div className=\"action-buttons\">\n//                         <button\n//                           onClick={() => {\n//                             const newStock = prompt('Enter new stock count:', sku.stock_count);\n//                             if (newStock !== null && newStock !== '') {\n//                               updateStock(sku.id, parseInt(newStock) || 0);\n//                             }\n//                           }}\n//                           className=\"btn btn-sm btn-edit\"\n//                           disabled={source === 'tiktok'}\n//                           title={source === 'tiktok' ? 'Cannot edit TikTok API data' : 'Edit stock count'}\n//                         >\n//                           📝 Edit\n//                         </button>\n\n//                         <button\n//                           onClick={() => sendSlackAlert(sku)}\n//                           className=\"btn btn-sm btn-alert\"\n//                           disabled={isAlertLoading}\n//                           title=\"Send Slack alert for this SKU\"\n//                         >\n//                           {isAlertLoading ? '⏳' : '🔔'} Alert\n//                         </button>\n//                       </div>\n//                     </td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         )}\n//       </div>\n\n//       {/* Summary Stats */}\n//       {skus.length > 0 && (\n//         <div className=\"summary-stats\">\n//           <div className=\"stat-item\">\n//             <span className=\"stat-label\">Total SKUs:</span>\n//             <span className=\"stat-value\">{skus.length}</span>\n//           </div>\n//           <div className=\"stat-item\">\n//             <span className=\"stat-label\">Low Stock:</span>\n//             <span className=\"stat-value warning\">\n//               {skus.filter(sku => getStockStatus(sku.stock_count, sku.low_stock_threshold) === 'low-stock').length}\n//             </span>\n//           </div>\n//           <div className=\"stat-item\">\n//             <span className=\"stat-label\">Out of Stock:</span>\n//             <span className=\"stat-value danger\">\n//               {skus.filter(sku => sku.stock_count === 0).length}\n//             </span>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default InventoryTracker;","map":{"version":3,"names":[],"sources":["/Users/yousafzahid/Documents/TT_shop_Dashboard/frontend/src/components/InventoryTracker.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './InventoryTracker.css';\n\n// const InventoryTracker = () => {\n//   const [brands, setBrands] = useState([]);\n//   const [selectedBrand, setSelectedBrand] = useState('');\n//   const [skus, setSkus] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [source, setSource] = useState('database');\n//   const [alertLoading, setAlertLoading] = useState({});\n\n//   const API_BASE = 'http://localhost:8000';\n\n//   // Fetch brands on component mount\n//   useEffect(() => {\n//     fetchBrands();\n//   }, []);\n\n//   // Fetch SKUs when brand changes or source changes\n//   useEffect(() => {\n//     if (selectedBrand) {\n//       fetchSkus(selectedBrand);\n//     }\n//   }, [selectedBrand, source]);\n\n//   const fetchBrands = async () => {\n//     try {\n//       const response = await fetch(`${API_BASE}/inventory/brands`);\n//       const data = await response.json();\n//       if (data.status === 'success') {\n//         setBrands(data.brands);\n//         if (data.brands.length > 0) {\n//           setSelectedBrand(data.brands[0].id.toString());\n//         }\n//       }\n//     } catch (error) {\n//       console.error('Error fetching brands:', error);\n//     }\n//   };\n\n//   const fetchSkus = async (brandId) => {\n//     setLoading(true);\n//     try {\n//       let url;\n//       if (source === 'tiktok') {\n//         // Fetch from TikTok API\n//         url = `${API_BASE}/inventory/check-stock?brand_id=${brandId}&send_alerts=false&source=tiktok`;\n//       } else {\n//         // Fetch from database\n//         url = `${API_BASE}/inventory/skus?brand_id=${brandId}`;\n//       }\n      \n//       const response = await fetch(url);\n//       const data = await response.json();\n      \n//       if (data.status === 'success') {\n//         if (source === 'tiktok') {\n//           // Transform TikTok data to match expected format\n//           const transformedSkus = data.low_stock_items.map(item => ({\n//             id: item.sku_id,\n//             name: item.sku_name,\n//             stock_count: item.current_stock,\n//             low_stock_threshold: item.threshold,\n//             brand_id: item.brand_id\n//           }));\n//           setSkus(transformedSkus);\n//         } else {\n//           setSkus(data.skus);\n//         }\n//       }\n//     } catch (error) {\n//       console.error('Error fetching SKUs:', error);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const updateStock = async (skuId, newStock) => {\n//     try {\n//       const response = await fetch(\n//         `${API_BASE}/inventory/update-stock?sku_id=${skuId}&stock_count=${newStock}`,\n//         { method: 'POST' }\n//       );\n//       const data = await response.json();\n      \n//       if (data.status === 'success') {\n//         fetchSkus(selectedBrand); // Refresh SKUs\n//         alert('Stock updated successfully!');\n//       } else {\n//         alert('Failed to update stock: ' + data.message);\n//       }\n//     } catch (error) {\n//       console.error('Error updating stock:', error);\n//       alert('Error updating stock');\n//     }\n//   };\n\n//   const updateThreshold = async (skuId, newThreshold) => {\n//     try {\n//       const response = await fetch(\n//         `${API_BASE}/inventory/update-threshold?sku_id=${skuId}&threshold=${newThreshold}`,\n//         { method: 'POST' }\n//       );\n//       const data = await response.json();\n      \n//       if (data.status === 'success') {\n//         fetchSkus(selectedBrand); // Refresh SKUs\n//         alert('Threshold updated successfully!');\n//       } else {\n//         alert('Failed to update threshold: ' + data.message);\n//       }\n//     } catch (error) {\n//       console.error('Error updating threshold:', error);\n//       alert('Error updating threshold');\n//     }\n//   };\n\n//   const sendSlackAlert = async (sku) => {\n//     const skuId = sku.id;\n//     setAlertLoading(prev => ({ ...prev, [skuId]: true }));\n    \n//     try {\n//       const alertData = {\n//         brand_id: selectedBrand,\n//         sku_id: skuId,\n//         sku_name: sku.name,\n//         current_stock: sku.stock_count,\n//         threshold: sku.low_stock_threshold,\n//         alert_level: sku.stock_count === 0 ? 'out_of_stock' : 'low_stock',\n//         priority: sku.stock_count === 0 ? 'high' : 'medium'\n//       };\n\n//       const response = await fetch(\n//         `${API_BASE}/inventory/send-alert`,\n//         {\n//           method: 'POST',\n//           headers: {\n//             'Content-Type': 'application/json',\n//           },\n//           body: JSON.stringify(alertData)\n//         }\n//       );\n      \n//       const data = await response.json();\n      \n//       if (data.status === 'success') {\n//         alert(`✅ Slack alert sent successfully for ${sku.name}!`);\n//       } else {\n//         alert(`❌ Failed to send alert: ${data.message}`);\n//       }\n//     } catch (error) {\n//       console.error('Error sending Slack alert:', error);\n//       alert('❌ Error sending Slack alert');\n//     } finally {\n//       setAlertLoading(prev => ({ ...prev, [skuId]: false }));\n//     }\n//   };\n\n//   const getStockStatus = (stock, threshold) => {\n//     if (stock === 0) return 'out-of-stock';\n//     if (stock <= threshold) return 'low-stock';\n//     return 'in-stock';\n//   };\n\n//   const getStockStatusColor = (status) => {\n//     switch (status) {\n//       case 'out-of-stock': return '#dc3545';\n//       case 'low-stock': return '#ffc107';\n//       case 'in-stock': return '#28a745';\n//       default: return '#6c757d';\n//     }\n//   };\n\n//   const getStockStatusText = (status) => {\n//     switch (status) {\n//       case 'out-of-stock': return '🚨 Out of Stock';\n//       case 'low-stock': return '⚠️ Low Stock';\n//       case 'in-stock': return '✅ In Stock';\n//       default: return '❓ Unknown';\n//     }\n//   };\n\n//   return (\n//     <div className=\"inventory-tracker-simple\">\n//       {/* Header */}\n//       <div className=\"inventory-header\">\n//         <div className=\"header-left\">\n//           <h1>📦 Inventory Tracker</h1>\n//           <p className=\"subtitle\">Monitor and manage your inventory levels</p>\n//         </div>\n        \n//         <div className=\"header-controls\">\n//           <div className=\"control-group\">\n//             <label>Brand:</label>\n//             <select \n//               value={selectedBrand} \n//               onChange={(e) => setSelectedBrand(e.target.value)}\n//               className=\"brand-selector\"\n//             >\n//               <option value=\"\">Select Brand</option>\n//               {brands.map(brand => (\n//                 <option key={brand.id} value={brand.id}>\n//                   {brand.name}\n//                 </option>\n//               ))}\n//             </select>\n//           </div>\n          \n//           <div className=\"control-group\">\n//             <label>Data Source:</label>\n//             <select \n//               value={source} \n//               onChange={(e) => setSource(e.target.value)}\n//               className=\"source-selector\"\n//             >\n//               <option value=\"database\">📊 Database</option>\n//               <option value=\"tiktok\">🛍️ TikTok API</option>\n//             </select>\n//           </div>\n          \n//           <button \n//             onClick={() => fetchSkus(selectedBrand)} \n//             className=\"btn btn-refresh\"\n//             disabled={loading || !selectedBrand}\n//           >\n//             {loading ? '🔄 Loading...' : '🔄 Refresh'}\n//           </button>\n//         </div>\n//       </div>\n\n//       {/* Data Source Info */}\n//       <div className=\"data-source-info\">\n//         <div className={`source-indicator ${source}`}>\n//           <span className=\"source-icon\">\n//             {source === 'tiktok' ? '🛍️' : '📊'}\n//           </span>\n//           <span className=\"source-text\">\n//             {source === 'tiktok' \n//               ? 'Live data from TikTok Shop API' \n//               : 'Data from local database'}\n//           </span>\n//         </div>\n//         {source === 'database' && (\n//           <small className=\"source-note\">\n//             💡 Switch to TikTok API for real-time inventory data\n//           </small>\n//         )}\n//       </div>\n\n//       {/* Inventory Table */}\n//       <div className=\"table-container\">\n//         {loading ? (\n//           <div className=\"loading-state\">\n//             <div className=\"spinner\"></div>\n//             <p>Loading inventory data...</p>\n//           </div>\n//         ) : skus.length === 0 ? (\n//           <div className=\"empty-state\">\n//             <div className=\"empty-icon\">📦</div>\n//             <h3>No inventory data found</h3>\n//             <p>\n//               {!selectedBrand \n//                 ? 'Please select a brand to view inventory.'\n//                 : 'No SKUs found for the selected brand.'}\n//             </p>\n//           </div>\n//         ) : (\n//           <table className=\"inventory-table\">\n//             <thead>\n//               <tr>\n//                 <th>SKU Name</th>\n//                 <th>Current Stock</th>\n//                 <th>Threshold</th>\n//                 <th>Status</th>\n//                 <th>Actions</th>\n//               </tr>\n//             </thead>\n//             <tbody>\n//               {skus.map(sku => {\n//                 const status = getStockStatus(sku.stock_count, sku.low_stock_threshold);\n//                 const isAlertLoading = alertLoading[sku.id];\n                \n//                 return (\n//                   <tr key={sku.id} className={`sku-row ${status}`}>\n//                     <td className=\"sku-name\">\n//                       <div className=\"sku-info\">\n//                         <strong>{sku.name}</strong>\n//                         <small>ID: {sku.id}</small>\n//                       </div>\n//                     </td>\n                    \n//                     <td className=\"stock-count\">\n//                       <input\n//                         type=\"number\"\n//                         value={sku.stock_count}\n//                         onChange={(e) => {\n//                           const newStock = parseInt(e.target.value) || 0;\n//                           updateStock(sku.id, newStock);\n//                         }}\n//                         className=\"stock-input\"\n//                         min=\"0\"\n//                         disabled={source === 'tiktok'} // Can't edit TikTok data\n//                       />\n//                     </td>\n                    \n//                     <td className=\"threshold\">\n//                       <input\n//                         type=\"number\"\n//                         value={sku.low_stock_threshold}\n//                         onChange={(e) => {\n//                           const newThreshold = parseInt(e.target.value) || 0;\n//                           updateThreshold(sku.id, newThreshold);\n//                         }}\n//                         className=\"threshold-input\"\n//                         min=\"0\"\n//                         disabled={source === 'tiktok'} // Can't edit TikTok data\n//                       />\n//                     </td>\n                    \n//                     <td className=\"status\">\n//                       <span \n//                         className=\"status-indicator\"\n//                         style={{ backgroundColor: getStockStatusColor(status) }}\n//                       >\n//                         {getStockStatusText(status)}\n//                       </span>\n//                     </td>\n                    \n//                     <td className=\"actions\">\n//                       <div className=\"action-buttons\">\n//                         <button\n//                           onClick={() => {\n//                             const newStock = prompt('Enter new stock count:', sku.stock_count);\n//                             if (newStock !== null && newStock !== '') {\n//                               updateStock(sku.id, parseInt(newStock) || 0);\n//                             }\n//                           }}\n//                           className=\"btn btn-sm btn-edit\"\n//                           disabled={source === 'tiktok'}\n//                           title={source === 'tiktok' ? 'Cannot edit TikTok API data' : 'Edit stock count'}\n//                         >\n//                           📝 Edit\n//                         </button>\n                        \n//                         <button\n//                           onClick={() => sendSlackAlert(sku)}\n//                           className=\"btn btn-sm btn-alert\"\n//                           disabled={isAlertLoading}\n//                           title=\"Send Slack alert for this SKU\"\n//                         >\n//                           {isAlertLoading ? '⏳' : '🔔'} Alert\n//                         </button>\n//                       </div>\n//                     </td>\n//                   </tr>\n//                 );\n//               })}\n//             </tbody>\n//           </table>\n//         )}\n//       </div>\n\n//       {/* Summary Stats */}\n//       {skus.length > 0 && (\n//         <div className=\"summary-stats\">\n//           <div className=\"stat-item\">\n//             <span className=\"stat-label\">Total SKUs:</span>\n//             <span className=\"stat-value\">{skus.length}</span>\n//           </div>\n//           <div className=\"stat-item\">\n//             <span className=\"stat-label\">Low Stock:</span>\n//             <span className=\"stat-value warning\">\n//               {skus.filter(sku => getStockStatus(sku.stock_count, sku.low_stock_threshold) === 'low-stock').length}\n//             </span>\n//           </div>\n//           <div className=\"stat-item\">\n//             <span className=\"stat-label\">Out of Stock:</span>\n//             <span className=\"stat-value danger\">\n//               {skus.filter(sku => sku.stock_count === 0).length}\n//             </span>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default InventoryTracker;\n\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}