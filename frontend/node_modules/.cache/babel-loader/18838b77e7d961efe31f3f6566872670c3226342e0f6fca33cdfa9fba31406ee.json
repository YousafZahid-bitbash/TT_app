{"ast":null,"code":"var _jsxFileName = \"/Users/yousafzahid/Documents/GitHub/TT_app/frontend/src/components/CreatorPerformance.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n\n// const CreatorPerformance = () => {\n//   const [yesterdayData, setYesterdayData] = useState({});\n//   const [currentWeekData, setCurrentWeekData] = useState({});\n//   const [monthToDateData, setMonthToDateData] = useState({});\n//   // const [dates, setDates] = useState({ startDate: '', endDate: '' });\n//   // const [data, setData] = useState(null);\n\n//   // Helper function to format dates as 'YYYY-MM-DD'\n//   const formatDate = (date) => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n//   };\n\n//   // Helper function to get the start of the current week (Monday)\n//   const getStartOfWeek = (date) => {\n//     const startOfWeek = new Date(date);\n//     const day = startOfWeek.getDay();\n//     const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n//     startOfWeek.setDate(diff);\n//     return formatDate(startOfWeek);\n//   };\n\n//   // Helper function to get the start of the current month\n//   const getStartOfMonth = (date) => {\n//     const startOfMonth = new Date(date);\n//     startOfMonth.setDate(1); // Set the date to the 1st of the month\n//     return formatDate(startOfMonth);\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const currentDate = new Date();\n\n//         // Get yesterday's date\n//         const yesterday = new Date(currentDate);\n//         yesterday.setDate(currentDate.getDate() - 1);\n//         const formattedYesterday = formatDate(yesterday);\n\n//         // Get start and end of current week\n//         const startOfWeek = getStartOfWeek(currentDate);\n//         const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n//         // Get start of the current month\n//         const startOfMonth = getStartOfMonth(currentDate);\n//         const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n//         // Fetch performance data (GMV, flash sales, etc.) for yesterday\n//         const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current week\n//         // const currentWeekPerformanceResponse = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: startOfWeek,\n//         //     end_time: formattedEndOfWeek,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // // Fetch performance data (GMV, flash sales, etc.) for the current month\n//         // const monthToDatePerformanceResponse = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: startOfMonth,\n//         //     end_time: formattedEndOfMonth,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // //fetch flash sales performance \n//         // const yesterdayflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: formattedYesterday,\n//         //     end_time: formattedYesterday,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // //fetch flash sales performance \n//         // const currentWeekflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: startOfWeek,\n//         //     end_time: formattedEndOfWeek,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // //fetch flash sales performance \n//         // const monthToDateflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: startOfMonth,\n//         //     end_time: formattedEndOfMonth,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // const compain = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: dates.startDate,\n//         //     end_time: dates.endDate,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n//         const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const dailygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Update the dashboard state with the fetched data\n//         setYesterdayData({\n//           topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: dailygmvPervideo.data.gmv,\n//           refundrate: dailyRefundrate.data.refundrate,\n//         });\n\n//         setCurrentWeekData({\n//           topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: weeklygmvPervideo.data.gmv,\n//           refundrate: weeklyRefundrate.data.refundrate,\n//         });\n\n//         setMonthToDateData({\n//           topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: monthlygmvPervideo.data.gmv,\n//           refundrate: monthlyRefundrate.data.refundrate\n//         });\n\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD',\n//       minimumFractionDigits: 2\n//     }).format(amount);\n//   };\n\n//   const calculatePercentage = (value, total) => {\n//     if (total === 0) return '0.0%';\n//     return ((value / total) * 100).toFixed(1) + '%';\n//   };\n\n//   const renderTable = (data, title, period, bgColor) => (\n//     <div className=\"analytics-table\">\n//       <div className={`table-header ${bgColor}`}>\n//         <h3>{title}</h3>\n//         <span className=\"period\">{period}</span>\n//       </div>\n//       <div className=\"table-content\">\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n//           <span className=\"metric-value\">{data.topPerformingCreators}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">GMV PER VIDEO</span>\n//           <span className=\"metric-value\">{data.gmvpervideo}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Refund Rate</span>\n//           <span className=\"metric-value\">{data.refundrate}</span>\n//         </div>\n//       </div>\n//     </div>\n\n//   );\n\n//   return (\n//     <div className=\"dashboard-container\">\n\n//       <div className=\"tables-container\">\n//         {renderTable(\n//           yesterdayData,\n//           'Yesterday',\n//           `Yesterday (${formatDate(new Date())})`,\n//           'header-blue'\n//         )}\n//         {renderTable(\n//           currentWeekData,\n//           'Current Week',\n//           `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n//           'header-green'\n//         )}\n//         {renderTable(\n//           monthToDateData,\n//           'Month to date',\n//           `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n//           'header-red'\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CreatorPerformance;\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatorPerformance = () => {\n  _s();\n  const {\n    brandId\n  } = useParams();\n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n\n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = useCallback(date => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  }, []);\n  const getStartOfMonth = useCallback(date => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1); // Set the date to the 1st of the month\n    return formatDate(startOfMonth);\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n        // Fetch performance data (GMV, flash sales, etc.) for yesterday\n        // const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n        //   params: {\n        //     start_time: formattedYesterday,\n        //     end_time: formattedYesterday,\n        //     page_size: 10,\n        //     page_no: 1\n        //   }\n        // });\n\n        // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n        const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_date: startOfMonth,\n            // Start of current month\n            end_date: formattedEndOfMonth,\n            // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth,\n            // Start of current month\n            end_date: formattedEndOfMonth,\n            // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth,\n            // Start of current month\n            end_date: formattedEndOfMonth,\n            // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n          gmvpervideo: dailygmvPervideo.data.gmv,\n          refundrate: dailyRefundrate.data.refund_rate\n        });\n        setCurrentWeekData({\n          topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n          gmvpervideo: weeklygmvPervideo.data.gmv,\n          refundrate: weeklyRefundrate.data.refund_rate\n        });\n        setMonthToDateData({\n          topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n          gmvpervideo: monthlygmvPervideo.data.gmv,\n          refundrate: monthlyRefundrate.data.refund_rate\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, [brandId, getStartOfMonth, getStartOfWeek]); // Fixed: removed undefined 'dates' from dependency array\n\n  // const formatCurrency = (amount) => {\n  //   return new Intl.NumberFormat('en-US', {\n  //     style: 'currency',\n  //     currency: 'USD',\n  //     minimumFractionDigits: 2\n  //   }).format(amount);\n  // };\n\n  // const calculatePercentage = (value, total) => {\n  //   if (total === 0) return '0.0%';\n  //   return ((value / total) * 100).toFixed(1) + '%';\n  // };\n\n  const renderTable = (data, title, period, bgColor) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analytics-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `table-header ${bgColor}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"period\",\n        children: period\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"TOP-PERFORMING CREATORS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.topPerformingCreators\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"GMV PER VIDEO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.gmvpervideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"Refund Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.refundrate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 474,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tables-container\",\n      children: [renderTable(yesterdayData, 'Yesterday', `Yesterday (${formatDate(new Date())})`, 'header-blue'), renderTable(currentWeekData, 'Current Week', `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`, 'header-green'), renderTable(monthToDateData, 'Month to date', `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`, 'header-red')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 497,\n    columnNumber: 5\n  }, this);\n};\n_s(CreatorPerformance, \"PBZshhvydEFqSpyfmYA+Oxs/JTM=\", false, function () {\n  return [useParams];\n});\n_c = CreatorPerformance;\nexport default CreatorPerformance;\nvar _c;\n$RefreshReg$(_c, \"CreatorPerformance\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","useParams","axios","jsxDEV","_jsxDEV","CreatorPerformance","_s","brandId","yesterdayData","setYesterdayData","currentWeekData","setCurrentWeekData","monthToDateData","setMonthToDateData","formatDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","getStartOfWeek","startOfWeek","Date","getDay","diff","setDate","getStartOfMonth","startOfMonth","fetchData","currentDate","yesterday","formattedYesterday","formattedEndOfWeek","formattedEndOfMonth","dailycreatorsResponse","get","params","start_time","end_time","page_size","page_no","weaklycreatorsResponse","monthlycreatorsResponse","start_date","end_date","dailygmvPervideo","weeklygmvPervideo","monthlygmvPervideo","dailyRefundrate","weeklyRefundrate","monthlyRefundrate","topPerformingCreators","data","top_creators","length","gmvpervideo","gmv","refundrate","refund_rate","error","console","renderTable","title","period","bgColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yousafzahid/Documents/GitHub/TT_app/frontend/src/components/CreatorPerformance.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n\n// const CreatorPerformance = () => {\n//   const [yesterdayData, setYesterdayData] = useState({});\n//   const [currentWeekData, setCurrentWeekData] = useState({});\n//   const [monthToDateData, setMonthToDateData] = useState({});\n//   // const [dates, setDates] = useState({ startDate: '', endDate: '' });\n//   // const [data, setData] = useState(null);\n\n \n//   // Helper function to format dates as 'YYYY-MM-DD'\n//   const formatDate = (date) => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n//   };\n\n//   // Helper function to get the start of the current week (Monday)\n//   const getStartOfWeek = (date) => {\n//     const startOfWeek = new Date(date);\n//     const day = startOfWeek.getDay();\n//     const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n//     startOfWeek.setDate(diff);\n//     return formatDate(startOfWeek);\n//   };\n\n//   // Helper function to get the start of the current month\n//   const getStartOfMonth = (date) => {\n//     const startOfMonth = new Date(date);\n//     startOfMonth.setDate(1); // Set the date to the 1st of the month\n//     return formatDate(startOfMonth);\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const currentDate = new Date();\n\n//         // Get yesterday's date\n//         const yesterday = new Date(currentDate);\n//         yesterday.setDate(currentDate.getDate() - 1);\n//         const formattedYesterday = formatDate(yesterday);\n\n//         // Get start and end of current week\n//         const startOfWeek = getStartOfWeek(currentDate);\n//         const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n//         // Get start of the current month\n//         const startOfMonth = getStartOfMonth(currentDate);\n//         const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n//         // Fetch performance data (GMV, flash sales, etc.) for yesterday\n//         const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current week\n//         // const currentWeekPerformanceResponse = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: startOfWeek,\n//         //     end_time: formattedEndOfWeek,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // // Fetch performance data (GMV, flash sales, etc.) for the current month\n//         // const monthToDatePerformanceResponse = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: startOfMonth,\n//         //     end_time: formattedEndOfMonth,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n        \n//         // //fetch flash sales performance \n//         // const yesterdayflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: formattedYesterday,\n//         //     end_time: formattedYesterday,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // //fetch flash sales performance \n//         // const currentWeekflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: startOfWeek,\n//         //     end_time: formattedEndOfWeek,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // //fetch flash sales performance \n//         // const monthToDateflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: startOfMonth,\n//         //     end_time: formattedEndOfMonth,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // const compain = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: dates.startDate,\n//         //     end_time: dates.endDate,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n\n//         // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n//         const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const dailygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Update the dashboard state with the fetched data\n//         setYesterdayData({\n//           topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: dailygmvPervideo.data.gmv,\n//           refundrate: dailyRefundrate.data.refundrate,\n//         });\n\n//         setCurrentWeekData({\n//           topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: weeklygmvPervideo.data.gmv,\n//           refundrate: weeklyRefundrate.data.refundrate,\n//         });\n\n//         setMonthToDateData({\n//           topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: monthlygmvPervideo.data.gmv,\n//           refundrate: monthlyRefundrate.data.refundrate\n//         });\n\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD',\n//       minimumFractionDigits: 2\n//     }).format(amount);\n//   };\n\n//   const calculatePercentage = (value, total) => {\n//     if (total === 0) return '0.0%';\n//     return ((value / total) * 100).toFixed(1) + '%';\n//   };\n\n//   const renderTable = (data, title, period, bgColor) => (\n//     <div className=\"analytics-table\">\n//       <div className={`table-header ${bgColor}`}>\n//         <h3>{title}</h3>\n//         <span className=\"period\">{period}</span>\n//       </div>\n//       <div className=\"table-content\">\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n//           <span className=\"metric-value\">{data.topPerformingCreators}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">GMV PER VIDEO</span>\n//           <span className=\"metric-value\">{data.gmvpervideo}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Refund Rate</span>\n//           <span className=\"metric-value\">{data.refundrate}</span>\n//         </div>\n//       </div>\n//     </div>\n\n\n//   );\n\n//   return (\n//     <div className=\"dashboard-container\">\n      \n\n//       <div className=\"tables-container\">\n//         {renderTable(\n//           yesterdayData,\n//           'Yesterday',\n//           `Yesterday (${formatDate(new Date())})`,\n//           'header-blue'\n//         )}\n//         {renderTable(\n//           currentWeekData,\n//           'Current Week',\n//           `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n//           'header-green'\n//         )}\n//         {renderTable(\n//           monthToDateData,\n//           'Month to date',\n//           `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n//           'header-red'\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CreatorPerformance;\n\n\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nconst CreatorPerformance = () => {\n  const { brandId } = useParams(); \n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n\n \n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = (date) => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = useCallback((date) => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  }, []);\n  \n  const getStartOfMonth = useCallback((date) => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1); // Set the date to the 1st of the month\n    return formatDate(startOfMonth);\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n        // Fetch performance data (GMV, flash sales, etc.) for yesterday\n        // const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n        //   params: {\n        //     start_time: formattedYesterday,\n        //     end_time: formattedYesterday,\n        //     page_size: 10,\n        //     page_no: 1\n        //   }\n        // });\n\n        // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n        const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_date: startOfMonth, // Start of current month\n            end_date: formattedEndOfMonth, // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const dailygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth, // Start of current month\n            end_date: formattedEndOfMonth, // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth, // Start of current month\n            end_date: formattedEndOfMonth, // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n          gmvpervideo: dailygmvPervideo.data.gmv,\n          refundrate: dailyRefundrate.data.refund_rate,\n        });\n\n        setCurrentWeekData({\n          topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n          gmvpervideo: weeklygmvPervideo.data.gmv,\n          refundrate: weeklyRefundrate.data.refund_rate,\n        });\n\n        setMonthToDateData({\n          topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n          gmvpervideo: monthlygmvPervideo.data.gmv,\n          refundrate: monthlyRefundrate.data.refund_rate\n        });\n\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, [brandId, getStartOfMonth, getStartOfWeek]); // Fixed: removed undefined 'dates' from dependency array\n\n  // const formatCurrency = (amount) => {\n  //   return new Intl.NumberFormat('en-US', {\n  //     style: 'currency',\n  //     currency: 'USD',\n  //     minimumFractionDigits: 2\n  //   }).format(amount);\n  // };\n\n  // const calculatePercentage = (value, total) => {\n  //   if (total === 0) return '0.0%';\n  //   return ((value / total) * 100).toFixed(1) + '%';\n  // };\n\n  const renderTable = (data, title, period, bgColor) => (\n    <div className=\"analytics-table\">\n      <div className={`table-header ${bgColor}`}>\n        <h3>{title}</h3>\n        <span className=\"period\">{period}</span>\n      </div>\n      <div className=\"table-content\">\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n          <span className=\"metric-value\">{data.topPerformingCreators}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">GMV PER VIDEO</span>\n          <span className=\"metric-value\">{data.gmvpervideo}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Refund Rate</span>\n          <span className=\"metric-value\">{data.refundrate}</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"dashboard-container\">\n      <div className=\"tables-container\">\n        {renderTable(\n          yesterdayData,\n          'Yesterday',\n          `Yesterday (${formatDate(new Date())})`,\n          'header-blue'\n        )}\n        {renderTable(\n          currentWeekData,\n          'Current Week',\n          `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n          'header-green'\n        )}\n        {renderTable(\n          monthToDateData,\n          'Month to date',\n          `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n          'header-red'\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CreatorPerformance;"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;A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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}