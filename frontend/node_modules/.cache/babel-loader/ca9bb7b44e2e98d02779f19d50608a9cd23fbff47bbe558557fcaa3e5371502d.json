{"ast":null,"code":"var _jsxFileName = \"/Users/yousafzahid/Documents/TT_shop_Dashboard/frontend/src/components/Dashboard.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import \"./Dashboard.css\";\n// import DatePickerCard from './Datepicker';\n\n// const Dashboard = () => {\n//   const [yesterdayData, setYesterdayData] = useState({});\n//   const [currentWeekData, setCurrentWeekData] = useState({});\n//   const [monthToDateData, setMonthToDateData] = useState({});\n//   const [dates, setDates] = useState({ startDate: '', endDate: '' });\n//   const [data, setData] = useState(null);\n\n//   const fetchPerformance = async () => {\n//     try {\n//       const response = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//         params: {\n//           start_time: dates.startDate, // use selected start date\n//           end_time: dates.endDate,     // use selected end date\n//           page_size: 10,\n//           page_no: 1,\n//         },\n//       });\n//       setData(response.data);\n//     } catch (error) {\n//       console.error('API call error:', error);\n//     }\n//   };\n\n//   // Helper function to format dates as 'YYYY-MM-DD'\n//   const formatDate = (date) => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n//   };\n\n//   // Helper function to get the start of the current week (Monday)\n//   const getStartOfWeek = (date) => {\n//     const startOfWeek = new Date(date);\n//     const day = startOfWeek.getDay();\n//     const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n//     startOfWeek.setDate(diff);\n//     return formatDate(startOfWeek);\n//   };\n\n//   // Helper function to get the start of the current month\n//   const getStartOfMonth = (date) => {\n//     const startOfMonth = new Date(date);\n//     startOfMonth.setDate(1); // Set the date to the 1st of the month\n//     return formatDate(startOfMonth);\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const currentDate = new Date();\n\n//         // Get yesterday's date\n//         const yesterday = new Date(currentDate);\n//         yesterday.setDate(currentDate.getDate() - 1);\n//         const formattedYesterday = formatDate(yesterday);\n\n//         // Get start and end of current week\n//         const startOfWeek = getStartOfWeek(currentDate);\n//         const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n//         // Get start of the current month\n//         const startOfMonth = getStartOfMonth(currentDate);\n//         const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n//         // Fetch performance data (GMV, flash sales, etc.) for yesterday\n//         const yesterdayPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current week\n//         const currentWeekPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current month\n//         const monthToDatePerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: startOfMonth,\n//             end_time: formattedEndOfMonth,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const yesterdayflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const currentWeekflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const monthToDateflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: startOfMonth,\n//             end_time: formattedEndOfMonth,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const compain = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: dates.startDate,\n//             end_time: dates.endDate,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n//         const dailycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weaklycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const dailygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Update the dashboard state with the fetched data\n//         setYesterdayData({\n//           totalGmv: yesterdayPerformanceResponse.data.gmv,\n//           flashSalesPerformance: yesterdayflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: dailygmvPervideo.data.gmv,\n//           refundrate: dailyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//         setCurrentWeekData({\n//           totalGmv: currentWeekPerformanceResponse.data.gmv,\n//           flashSalesPerformance: currentWeekflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: weeklygmvPervideo.data.gmv,\n//           refundrate: weeklyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//         setMonthToDateData({\n//           totalGmv: monthToDatePerformanceResponse.data.gmv,\n//           flashSalesPerformance: monthToDateflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: monthlygmvPervideo.data.gmv,\n//           refundrate: monthlyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD',\n//       minimumFractionDigits: 2\n//     }).format(amount);\n//   };\n\n//   const calculatePercentage = (value, total) => {\n//     if (total === 0) return '0.0%';\n//     return ((value / total) * 100).toFixed(1) + '%';\n//   };\n\n//   const renderTable = (data, title, period, bgColor) => (\n//     <div className=\"analytics-table\">\n//       <div className={`table-header ${bgColor}`}>\n//         <h3>{title}</h3>\n//         <span className=\"period\">{period}</span>\n//       </div>\n//       <div className=\"table-content\">\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOTAL GMV</span>\n//           <span className=\"metric-value\">{formatCurrency(data.totalGmv)}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">FLASH SALES PERFORMANCE</span>\n//           <span className=\"metric-value\">{formatCurrency(data.flashSalesPerformance)}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n//           <span className=\"metric-value\">{data.topPerformingCreators}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">GMV PER VIDEO</span>\n//           <span className=\"metric-value\">{data.gmvpervideo}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Refund Rate </span>\n//           <span className=\"metric-value\">{data.refundrate}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Tiktok Compaign outcome </span>\n//           <span className=\"metric-value\">{data.Tiktokcompaign}</span>\n//           {/* <DatePickerCard onDatesChange={setDates} />\n//           <button\n//             className=\"mt-4 bg-blue-500 text-white rounded-lg px-4 py-2\"\n//             onClick={fetchPerformance}\n//             disabled={!dates.startDate || !dates.endDate}\n//           >\n//             Get Performance\n//           </button> */}\n//         </div>\n//       </div>\n//     </div>\n\n//   );\n\n//   return (\n//     <div className=\"dashboard-container\">   \n//       <div className=\"tables-container\">\n//         {renderTable(\n//           yesterdayData,\n//           'Yesterday',\n//           `Yesterday (${formatDate(new Date())})`,\n//           'header-blue'\n//         )}\n//         {renderTable(\n//           currentWeekData,\n//           'Current Week',\n//           `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n//           'header-green'\n//         )}\n//         {renderTable(\n//           monthToDateData,\n//           'Month to date',\n//           `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n//           'header-red'\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport \"./Dashboard.css\";\nimport DatePickerCard from './Datepicker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n  const [dates, setDates] = useState({\n    startDate: '',\n    endDate: ''\n  });\n  const [data, setData] = useState(null);\n  const [customRangeData, setCustomRangeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedPeriods, setSelectedPeriods] = useState([]);\n\n  // Function to generate month periods between start and end date\n  const generateMonthPeriods = (startDate, endDate) => {\n    const periods = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    let current = new Date(start.getFullYear(), start.getMonth(), 1);\n    while (current <= end) {\n      const monthStart = new Date(current);\n      const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0);\n\n      // Adjust for the actual range\n      const periodStart = monthStart < start ? start : monthStart;\n      const periodEnd = monthEnd > end ? end : monthEnd;\n      periods.push({\n        label: current.toLocaleString('default', {\n          month: 'short',\n          year: 'numeric'\n        }),\n        startDate: formatDate(periodStart),\n        endDate: formatDate(periodEnd),\n        fullMonth: monthStart >= start && monthEnd <= end\n      });\n      current.setMonth(current.getMonth() + 1);\n    }\n    return periods;\n  };\n  const fetchCustomRangeData = async () => {\n    if (!dates.startDate || !dates.endDate) {\n      alert('Please select both start and end dates');\n      return;\n    }\n    setLoading(true);\n    try {\n      const periods = generateMonthPeriods(dates.startDate, dates.endDate);\n      setSelectedPeriods(periods);\n      const periodData = await Promise.all(periods.map(async period => {\n        try {\n          var _creatorsResponse$dat;\n          // Fetch all required data for this period\n          const [performanceResponse, flashSalesResponse, creatorsResponse, gmvPerVideoResponse, refundRateResponse] = await Promise.all([axios.get('http://127.0.0.1:8000/shop/performance', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          }), axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          }), axios.get('http://127.0.0.1:8000/top_performing_creators', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          }), axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          }), axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          })]);\n          return {\n            period: period.label,\n            startDate: period.startDate,\n            endDate: period.endDate,\n            totalGmv: performanceResponse.data.gmv || 0,\n            flashSalesPerformance: flashSalesResponse.data.total_sales || 0,\n            topPerformingCreators: ((_creatorsResponse$dat = creatorsResponse.data.top_creators) === null || _creatorsResponse$dat === void 0 ? void 0 : _creatorsResponse$dat.length) || 0,\n            gmvPerVideo: gmvPerVideoResponse.data.gmv || 0,\n            refundRate: refundRateResponse.data.refund_rate || 0,\n            tiktokCampaign: performanceResponse.data.gmv || 0 // Using GMV as campaign outcome\n          };\n        } catch (error) {\n          console.error(`Error fetching data for period ${period.label}:`, error);\n          return {\n            period: period.label,\n            startDate: period.startDate,\n            endDate: period.endDate,\n            totalGmv: 0,\n            flashSalesPerformance: 0,\n            topPerformingCreators: 0,\n            gmvPerVideo: 0,\n            refundRate: 0,\n            tiktokCampaign: 0,\n            error: true\n          };\n        }\n      }));\n      setCustomRangeData(periodData);\n    } catch (error) {\n      console.error('Error fetching custom range data:', error);\n      alert('Error fetching data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchPerformance = async () => {\n    try {\n      const response = await axios.get('http://127.0.0.1:8000/shop/performance', {\n        params: {\n          start_time: dates.startDate,\n          end_time: dates.endDate,\n          page_size: 10,\n          page_no: 1\n        }\n      });\n      setData(response.data);\n    } catch (error) {\n      console.error('API call error:', error);\n    }\n  };\n\n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = date => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  };\n\n  // Helper function to get the start of the current month\n  const getStartOfMonth = date => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1);\n    return formatDate(startOfMonth);\n  };\n\n  // Calculate percentage change\n  const calculatePercentageChange = (current, previous) => {\n    if (previous === 0) {\n      return current > 0 ? '+100.0%' : '0.0%';\n    }\n    const change = (current - previous) / previous * 100;\n    const sign = change >= 0 ? '+' : '';\n    return `${sign}${change.toFixed(1)}%`;\n  };\n\n  // Calculate totals for the custom range table\n  const calculateTotals = () => {\n    if (customRangeData.length === 0) return {};\n    return {\n      totalGmv: customRangeData.reduce((sum, period) => sum + period.totalGmv, 0),\n      flashSalesPerformance: customRangeData.reduce((sum, period) => sum + period.flashSalesPerformance, 0),\n      topPerformingCreators: Math.max(...customRangeData.map(period => period.topPerformingCreators), 0),\n      gmvPerVideo: customRangeData.reduce((sum, period) => sum + period.gmvPerVideo, 0) / customRangeData.length,\n      refundRate: customRangeData.reduce((sum, period) => sum + period.refundRate, 0) / customRangeData.length,\n      tiktokCampaign: customRangeData.reduce((sum, period) => sum + period.tiktokCampaign, 0)\n    };\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate));\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate);\n\n        // Fetch performance data for yesterday\n        const yesterdayPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current week\n        const currentWeekPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current month\n        const monthToDatePerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch flash sales performance \n        const yesterdayflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const currentWeekflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthToDateflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch top-performing creators for each period\n        const dailycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          totalGmv: yesterdayPerformanceResponse.data.gmv,\n          flashSalesPerformance: yesterdayflashsales.data.total_sales,\n          topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n          gmvpervideo: dailygmvPervideo.data.gmv,\n          refundrate: dailyRefundrate.data.refund_rate,\n          Tiktokcompaign: yesterdayPerformanceResponse.data.gmv\n        });\n        setCurrentWeekData({\n          totalGmv: currentWeekPerformanceResponse.data.gmv,\n          flashSalesPerformance: currentWeekflashsales.data.total_sales,\n          topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n          gmvpervideo: weeklygmvPervideo.data.gmv,\n          refundrate: weeklyRefundrate.data.refund_rate,\n          Tiktokcompaign: currentWeekPerformanceResponse.data.gmv\n        });\n        setMonthToDateData({\n          totalGmv: monthToDatePerformanceResponse.data.gmv,\n          flashSalesPerformance: monthToDateflashsales.data.total_sales,\n          topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n          gmvpervideo: monthlygmvPervideo.data.gmv,\n          refundrate: monthlyRefundrate.data.refund_rate,\n          Tiktokcompaign: monthToDatePerformanceResponse.data.gmv\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n  const formatPercentage = value => {\n    return `${value.toFixed(1)}%`;\n  };\n  const renderTable = (data, title, period, bgColor) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analytics-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `table-header ${bgColor}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 750,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"period\",\n        children: period\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"TOTAL GMV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: formatCurrency(data.totalGmv)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"FLASH SALES PERFORMANCE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: formatCurrency(data.flashSalesPerformance)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 760,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"TOP-PERFORMING CREATORS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.topPerformingCreators\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 762,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"GMV PER VIDEO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.gmvpervideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"Refund Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 771,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.refundrate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"Tiktok Campaign outcome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.Tiktokcompaign\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 748,\n    columnNumber: 5\n  }, this);\n\n  // New custom range table component\n  const renderCustomRangeTable = () => {\n    if (customRangeData.length === 0) return null;\n    const totals = calculateTotals();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-range-table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-range-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Performance Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"date-range-info\",\n          children: [\"From \", dates.startDate, \" to \", dates.endDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 790,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"performance-table\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"data-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"parameter-column\",\n                children: \"Parameter/Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 801,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"period-column\",\n                children: period.period\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 803,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"total-column\",\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 800,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 799,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"section-header\",\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: customRangeData.length + 2,\n                children: \"Sales Performance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 812,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 811,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"GMV (raw)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 816,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatCurrency(period.totalGmv)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 819,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.totalGmv > 0 ? 'positive' : 'neutral'}`,\n                  children: [period.totalGmv > 0 ? '+' : '', (period.totalGmv / (totals.totalGmv || 1) * 100).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 820,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 818,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatCurrency(totals.totalGmv)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 825,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 815,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"Flash Sales Performance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 829,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatCurrency(period.flashSalesPerformance)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 832,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.flashSalesPerformance > 0 ? 'positive' : 'neutral'}`,\n                  children: [period.flashSalesPerformance > 0 ? '+' : '', (period.flashSalesPerformance / (totals.flashSalesPerformance || 1) * 100).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 833,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 831,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatCurrency(totals.flashSalesPerformance)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 838,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"Top Performing Creators\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 842,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: period.topPerformingCreators\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 845,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-change neutral\",\n                  children: [period.topPerformingCreators > 0 ? '+' : '', period.topPerformingCreators]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 846,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 844,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: totals.topPerformingCreators\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 851,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 841,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"GMV Per Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 855,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatCurrency(period.gmvPerVideo)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 858,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.gmvPerVideo > 0 ? 'positive' : 'neutral'}`,\n                  children: [period.gmvPerVideo > 0 ? '+' : '', formatPercentage(period.gmvPerVideo / (totals.gmvPerVideo || 1) * 100)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 859,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 857,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatCurrency(totals.gmvPerVideo)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 864,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 854,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"Refund Rate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 868,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatPercentage(period.refundRate)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 871,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.refundRate < totals.refundRate ? 'positive' : 'negative'}`,\n                  children: [period.refundRate < totals.refundRate ? '↓' : '↑', Math.abs(period.refundRate - totals.refundRate).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 872,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 870,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatPercentage(totals.refundRate)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 877,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 867,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"TikTok Campaign Outcome\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 881,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatCurrency(period.tiktokCampaign)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 884,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.tiktokCampaign > 0 ? 'positive' : 'neutral'}`,\n                  children: [period.tiktokCampaign > 0 ? '+' : '', (period.tiktokCampaign / (totals.tiktokCampaign || 1) * 100).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 885,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 883,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatCurrency(totals.tiktokCampaign)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 890,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 880,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 789,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tables-container\",\n      children: [renderTable(yesterdayData, 'Yesterday', `Yesterday (${formatDate(new Date())})`, 'header-blue'), renderTable(currentWeekData, 'Current Week', `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`, 'header-green'), renderTable(monthToDateData, 'Month to date', `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`, 'header-red')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 902,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-range-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-picker-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Custom Date Range Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 926,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePickerCard, {\n          onDatesChange: setDates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fetch-button\",\n          onClick: fetchCustomRangeData,\n          disabled: !dates.startDate || !dates.endDate || loading,\n          children: loading ? 'Loading...' : 'Analyze Performance'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 928,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 925,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 924,\n      columnNumber: 7\n    }, this), renderCustomRangeTable()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 900,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"Ce9lwCujTaJG3pMgOcb7KLgG7Ak=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","DatePickerCard","jsxDEV","_jsxDEV","Dashboard","_s","yesterdayData","setYesterdayData","currentWeekData","setCurrentWeekData","monthToDateData","setMonthToDateData","dates","setDates","startDate","endDate","data","setData","customRangeData","setCustomRangeData","loading","setLoading","selectedPeriods","setSelectedPeriods","generateMonthPeriods","periods","start","Date","end","current","getFullYear","getMonth","monthStart","monthEnd","periodStart","periodEnd","push","label","toLocaleString","month","year","formatDate","fullMonth","setMonth","fetchCustomRangeData","alert","periodData","Promise","all","map","period","_creatorsResponse$dat","performanceResponse","flashSalesResponse","creatorsResponse","gmvPerVideoResponse","refundRateResponse","get","params","start_time","end_time","page_size","page_no","totalGmv","gmv","flashSalesPerformance","total_sales","topPerformingCreators","top_creators","length","gmvPerVideo","refundRate","refund_rate","tiktokCampaign","error","console","fetchPerformance","response","date","String","padStart","day","getDate","getStartOfWeek","startOfWeek","getDay","diff","setDate","getStartOfMonth","startOfMonth","calculatePercentageChange","previous","change","sign","toFixed","calculateTotals","reduce","sum","Math","max","fetchData","currentDate","yesterday","formattedYesterday","formattedEndOfWeek","formattedEndOfMonth","yesterdayPerformanceResponse","currentWeekPerformanceResponse","monthToDatePerformanceResponse","yesterdayflashsales","currentWeekflashsales","monthToDateflashsales","dailycreatorsResponse","weaklycreatorsResponse","monthlycreatorsResponse","start_date","end_date","dailygmvPervideo","weeklygmvPervideo","monthlygmvPervideo","dailyRefundrate","weeklyRefundrate","monthlyRefundrate","gmvpervideo","refundrate","Tiktokcompaign","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","formatPercentage","value","renderTable","title","bgColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderCustomRangeTable","totals","index","colSpan","abs","onDatesChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/yousafzahid/Documents/TT_shop_Dashboard/frontend/src/components/Dashboard.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import \"./Dashboard.css\";\n// import DatePickerCard from './Datepicker';\n\n// const Dashboard = () => {\n//   const [yesterdayData, setYesterdayData] = useState({});\n//   const [currentWeekData, setCurrentWeekData] = useState({});\n//   const [monthToDateData, setMonthToDateData] = useState({});\n//   const [dates, setDates] = useState({ startDate: '', endDate: '' });\n//   const [data, setData] = useState(null);\n\n//   const fetchPerformance = async () => {\n//     try {\n//       const response = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//         params: {\n//           start_time: dates.startDate, // use selected start date\n//           end_time: dates.endDate,     // use selected end date\n//           page_size: 10,\n//           page_no: 1,\n//         },\n//       });\n//       setData(response.data);\n//     } catch (error) {\n//       console.error('API call error:', error);\n//     }\n//   };\n\n//   // Helper function to format dates as 'YYYY-MM-DD'\n//   const formatDate = (date) => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n//   };\n\n//   // Helper function to get the start of the current week (Monday)\n//   const getStartOfWeek = (date) => {\n//     const startOfWeek = new Date(date);\n//     const day = startOfWeek.getDay();\n//     const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n//     startOfWeek.setDate(diff);\n//     return formatDate(startOfWeek);\n//   };\n\n//   // Helper function to get the start of the current month\n//   const getStartOfMonth = (date) => {\n//     const startOfMonth = new Date(date);\n//     startOfMonth.setDate(1); // Set the date to the 1st of the month\n//     return formatDate(startOfMonth);\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const currentDate = new Date();\n\n//         // Get yesterday's date\n//         const yesterday = new Date(currentDate);\n//         yesterday.setDate(currentDate.getDate() - 1);\n//         const formattedYesterday = formatDate(yesterday);\n\n//         // Get start and end of current week\n//         const startOfWeek = getStartOfWeek(currentDate);\n//         const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n//         // Get start of the current month\n//         const startOfMonth = getStartOfMonth(currentDate);\n//         const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n//         // Fetch performance data (GMV, flash sales, etc.) for yesterday\n//         const yesterdayPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current week\n//         const currentWeekPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current month\n//         const monthToDatePerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: startOfMonth,\n//             end_time: formattedEndOfMonth,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n        \n//         //fetch flash sales performance \n//         const yesterdayflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const currentWeekflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const monthToDateflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: startOfMonth,\n//             end_time: formattedEndOfMonth,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const compain = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: dates.startDate,\n//             end_time: dates.endDate,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n\n//         // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n//         const dailycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weaklycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const dailygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Update the dashboard state with the fetched data\n//         setYesterdayData({\n//           totalGmv: yesterdayPerformanceResponse.data.gmv,\n//           flashSalesPerformance: yesterdayflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: dailygmvPervideo.data.gmv,\n//           refundrate: dailyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//         setCurrentWeekData({\n//           totalGmv: currentWeekPerformanceResponse.data.gmv,\n//           flashSalesPerformance: currentWeekflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: weeklygmvPervideo.data.gmv,\n//           refundrate: weeklyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//         setMonthToDateData({\n//           totalGmv: monthToDatePerformanceResponse.data.gmv,\n//           flashSalesPerformance: monthToDateflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: monthlygmvPervideo.data.gmv,\n//           refundrate: monthlyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD',\n//       minimumFractionDigits: 2\n//     }).format(amount);\n//   };\n\n//   const calculatePercentage = (value, total) => {\n//     if (total === 0) return '0.0%';\n//     return ((value / total) * 100).toFixed(1) + '%';\n//   };\n\n//   const renderTable = (data, title, period, bgColor) => (\n//     <div className=\"analytics-table\">\n//       <div className={`table-header ${bgColor}`}>\n//         <h3>{title}</h3>\n//         <span className=\"period\">{period}</span>\n//       </div>\n//       <div className=\"table-content\">\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOTAL GMV</span>\n//           <span className=\"metric-value\">{formatCurrency(data.totalGmv)}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">FLASH SALES PERFORMANCE</span>\n//           <span className=\"metric-value\">{formatCurrency(data.flashSalesPerformance)}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n//           <span className=\"metric-value\">{data.topPerformingCreators}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">GMV PER VIDEO</span>\n//           <span className=\"metric-value\">{data.gmvpervideo}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Refund Rate </span>\n//           <span className=\"metric-value\">{data.refundrate}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Tiktok Compaign outcome </span>\n//           <span className=\"metric-value\">{data.Tiktokcompaign}</span>\n//           {/* <DatePickerCard onDatesChange={setDates} />\n//           <button\n//             className=\"mt-4 bg-blue-500 text-white rounded-lg px-4 py-2\"\n//             onClick={fetchPerformance}\n//             disabled={!dates.startDate || !dates.endDate}\n//           >\n//             Get Performance\n//           </button> */}\n//         </div>\n//       </div>\n//     </div>\n\n\n//   );\n\n//   return (\n//     <div className=\"dashboard-container\">   \n//       <div className=\"tables-container\">\n//         {renderTable(\n//           yesterdayData,\n//           'Yesterday',\n//           `Yesterday (${formatDate(new Date())})`,\n//           'header-blue'\n//         )}\n//         {renderTable(\n//           currentWeekData,\n//           'Current Week',\n//           `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n//           'header-green'\n//         )}\n//         {renderTable(\n//           monthToDateData,\n//           'Month to date',\n//           `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n//           'header-red'\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport \"./Dashboard.css\";\nimport DatePickerCard from './Datepicker';\n\nconst Dashboard = () => {\n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n  const [dates, setDates] = useState({ startDate: '', endDate: '' });\n  const [data, setData] = useState(null);\n  const [customRangeData, setCustomRangeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedPeriods, setSelectedPeriods] = useState([]);\n\n  // Function to generate month periods between start and end date\n  const generateMonthPeriods = (startDate, endDate) => {\n    const periods = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    \n    let current = new Date(start.getFullYear(), start.getMonth(), 1);\n    \n    while (current <= end) {\n      const monthStart = new Date(current);\n      const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0);\n      \n      // Adjust for the actual range\n      const periodStart = monthStart < start ? start : monthStart;\n      const periodEnd = monthEnd > end ? end : monthEnd;\n      \n      periods.push({\n        label: current.toLocaleString('default', { month: 'short', year: 'numeric' }),\n        startDate: formatDate(periodStart),\n        endDate: formatDate(periodEnd),\n        fullMonth: monthStart >= start && monthEnd <= end\n      });\n      \n      current.setMonth(current.getMonth() + 1);\n    }\n    \n    return periods;\n  };\n\n  const fetchCustomRangeData = async () => {\n    if (!dates.startDate || !dates.endDate) {\n      alert('Please select both start and end dates');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const periods = generateMonthPeriods(dates.startDate, dates.endDate);\n      setSelectedPeriods(periods);\n      \n      const periodData = await Promise.all(\n        periods.map(async (period) => {\n          try {\n            // Fetch all required data for this period\n            const [\n              performanceResponse,\n              flashSalesResponse,\n              creatorsResponse,\n              gmvPerVideoResponse,\n              refundRateResponse\n            ] = await Promise.all([\n              axios.get('http://127.0.0.1:8000/shop/performance', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              }),\n              axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              }),\n              axios.get('http://127.0.0.1:8000/top_performing_creators', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              }),\n              axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              }),\n              axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              })\n            ]);\n\n            return {\n              period: period.label,\n              startDate: period.startDate,\n              endDate: period.endDate,\n              totalGmv: performanceResponse.data.gmv || 0,\n              flashSalesPerformance: flashSalesResponse.data.total_sales || 0,\n              topPerformingCreators: creatorsResponse.data.top_creators?.length || 0,\n              gmvPerVideo: gmvPerVideoResponse.data.gmv || 0,\n              refundRate: refundRateResponse.data.refund_rate || 0,\n              tiktokCampaign: performanceResponse.data.gmv || 0 // Using GMV as campaign outcome\n            };\n          } catch (error) {\n            console.error(`Error fetching data for period ${period.label}:`, error);\n            return {\n              period: period.label,\n              startDate: period.startDate,\n              endDate: period.endDate,\n              totalGmv: 0,\n              flashSalesPerformance: 0,\n              topPerformingCreators: 0,\n              gmvPerVideo: 0,\n              refundRate: 0,\n              tiktokCampaign: 0,\n              error: true\n            };\n          }\n        })\n      );\n\n      setCustomRangeData(periodData);\n    } catch (error) {\n      console.error('Error fetching custom range data:', error);\n      alert('Error fetching data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchPerformance = async () => {\n    try {\n      const response = await axios.get('http://127.0.0.1:8000/shop/performance', {\n        params: {\n          start_time: dates.startDate,\n          end_time: dates.endDate,\n          page_size: 10,\n          page_no: 1,\n        },\n      });\n      setData(response.data);\n    } catch (error) {\n      console.error('API call error:', error);\n    }\n  };\n\n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = (date) => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = (date) => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  };\n\n  // Helper function to get the start of the current month\n  const getStartOfMonth = (date) => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1);\n    return formatDate(startOfMonth);\n  };\n\n  // Calculate percentage change\n  const calculatePercentageChange = (current, previous) => {\n    if (previous === 0) {\n      return current > 0 ? '+100.0%' : '0.0%';\n    }\n    const change = ((current - previous) / previous) * 100;\n    const sign = change >= 0 ? '+' : '';\n    return `${sign}${change.toFixed(1)}%`;\n  };\n\n  // Calculate totals for the custom range table\n  const calculateTotals = () => {\n    if (customRangeData.length === 0) return {};\n    \n    return {\n      totalGmv: customRangeData.reduce((sum, period) => sum + period.totalGmv, 0),\n      flashSalesPerformance: customRangeData.reduce((sum, period) => sum + period.flashSalesPerformance, 0),\n      topPerformingCreators: Math.max(...customRangeData.map(period => period.topPerformingCreators), 0),\n      gmvPerVideo: customRangeData.reduce((sum, period) => sum + period.gmvPerVideo, 0) / customRangeData.length,\n      refundRate: customRangeData.reduce((sum, period) => sum + period.refundRate, 0) / customRangeData.length,\n      tiktokCampaign: customRangeData.reduce((sum, period) => sum + period.tiktokCampaign, 0)\n    };\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate));\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate);\n\n        // Fetch performance data for yesterday\n        const yesterdayPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current week\n        const currentWeekPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current month\n        const monthToDatePerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        \n        // Fetch flash sales performance \n        const yesterdayflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const currentWeekflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const monthToDateflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch top-performing creators for each period\n        const dailycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const dailygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          totalGmv: yesterdayPerformanceResponse.data.gmv,\n          flashSalesPerformance: yesterdayflashsales.data.total_sales,\n          topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n          gmvpervideo: dailygmvPervideo.data.gmv,\n          refundrate: dailyRefundrate.data.refund_rate,\n          Tiktokcompaign: yesterdayPerformanceResponse.data.gmv\n        });\n\n        setCurrentWeekData({\n          totalGmv: currentWeekPerformanceResponse.data.gmv,\n          flashSalesPerformance: currentWeekflashsales.data.total_sales,\n          topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n          gmvpervideo: weeklygmvPervideo.data.gmv,\n          refundrate: weeklyRefundrate.data.refund_rate,\n          Tiktokcompaign: currentWeekPerformanceResponse.data.gmv\n        });\n\n        setMonthToDateData({\n          totalGmv: monthToDatePerformanceResponse.data.gmv,\n          flashSalesPerformance: monthToDateflashsales.data.total_sales,\n          topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n          gmvpervideo: monthlygmvPervideo.data.gmv,\n          refundrate: monthlyRefundrate.data.refund_rate,\n          Tiktokcompaign: monthToDatePerformanceResponse.data.gmv\n        });\n\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatPercentage = (value) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const renderTable = (data, title, period, bgColor) => (\n    <div className=\"analytics-table\">\n      <div className={`table-header ${bgColor}`}>\n        <h3>{title}</h3>\n        <span className=\"period\">{period}</span>\n      </div>\n      <div className=\"table-content\">\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">TOTAL GMV</span>\n          <span className=\"metric-value\">{formatCurrency(data.totalGmv)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">FLASH SALES PERFORMANCE</span>\n          <span className=\"metric-value\">{formatCurrency(data.flashSalesPerformance)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n          <span className=\"metric-value\">{data.topPerformingCreators}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">GMV PER VIDEO</span>\n          <span className=\"metric-value\">{data.gmvpervideo}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Refund Rate</span>\n          <span className=\"metric-value\">{data.refundrate}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Tiktok Campaign outcome</span>\n          <span className=\"metric-value\">{data.Tiktokcompaign}</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  // New custom range table component\n  const renderCustomRangeTable = () => {\n    if (customRangeData.length === 0) return null;\n\n    const totals = calculateTotals();\n\n    return (\n      <div className=\"custom-range-table-container\">\n        <div className=\"custom-range-header\">\n          <h2>Performance Analysis</h2>\n          <p className=\"date-range-info\">\n            From {dates.startDate} to {dates.endDate}\n          </p>\n        </div>\n        \n        <div className=\"performance-table\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th className=\"parameter-column\">Parameter/Date</th>\n                {customRangeData.map((period, index) => (\n                  <th key={index} className=\"period-column\">\n                    {period.period}\n                  </th>\n                ))}\n                <th className=\"total-column\">Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr className=\"section-header\">\n                <td colSpan={customRangeData.length + 2}>Sales Performance</td>\n              </tr>\n              \n              <tr>\n                <td className=\"metric-label\">GMV (raw)</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatCurrency(period.totalGmv)}</div>\n                    <div className={`metric-change ${period.totalGmv > 0 ? 'positive' : 'neutral'}`}>\n                      {period.totalGmv > 0 ? '+' : ''}{((period.totalGmv / (totals.totalGmv || 1)) * 100).toFixed(1)}%\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatCurrency(totals.totalGmv)}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">Flash Sales Performance</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatCurrency(period.flashSalesPerformance)}</div>\n                    <div className={`metric-change ${period.flashSalesPerformance > 0 ? 'positive' : 'neutral'}`}>\n                      {period.flashSalesPerformance > 0 ? '+' : ''}{((period.flashSalesPerformance / (totals.flashSalesPerformance || 1)) * 100).toFixed(1)}%\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatCurrency(totals.flashSalesPerformance)}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">Top Performing Creators</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{period.topPerformingCreators}</div>\n                    <div className=\"metric-change neutral\">\n                      {period.topPerformingCreators > 0 ? '+' : ''}{period.topPerformingCreators}\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{totals.topPerformingCreators}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">GMV Per Video</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatCurrency(period.gmvPerVideo)}</div>\n                    <div className={`metric-change ${period.gmvPerVideo > 0 ? 'positive' : 'neutral'}`}>\n                      {period.gmvPerVideo > 0 ? '+' : ''}{formatPercentage((period.gmvPerVideo / (totals.gmvPerVideo || 1)) * 100)}\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatCurrency(totals.gmvPerVideo)}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">Refund Rate</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatPercentage(period.refundRate)}</div>\n                    <div className={`metric-change ${period.refundRate < totals.refundRate ? 'positive' : 'negative'}`}>\n                      {period.refundRate < totals.refundRate ? '↓' : '↑'}{Math.abs(period.refundRate - totals.refundRate).toFixed(1)}%\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatPercentage(totals.refundRate)}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">TikTok Campaign Outcome</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatCurrency(period.tiktokCampaign)}</div>\n                    <div className={`metric-change ${period.tiktokCampaign > 0 ? 'positive' : 'neutral'}`}>\n                      {period.tiktokCampaign > 0 ? '+' : ''}{((period.tiktokCampaign / (totals.tiktokCampaign || 1)) * 100).toFixed(1)}%\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatCurrency(totals.tiktokCampaign)}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      {/* Original Dashboard Tables */}\n      <div className=\"tables-container\">\n        {renderTable(\n          yesterdayData,\n          'Yesterday',\n          `Yesterday (${formatDate(new Date())})`,\n          'header-blue'\n        )}\n        {renderTable(\n          currentWeekData,\n          'Current Week',\n          `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n          'header-green'\n        )}\n        {renderTable(\n          monthToDateData,\n          'Month to date',\n          `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n          'header-red'\n        )}\n      </div>\n\n      {/* Date Range Selection Section */}\n      <div className=\"date-range-section\">\n        <div className=\"date-picker-container\">\n          <h2>Custom Date Range Analysis</h2>\n          <DatePickerCard onDatesChange={setDates} />\n          <button\n            className=\"fetch-button\"\n            onClick={fetchCustomRangeData}\n            disabled={!dates.startDate || !dates.endDate || loading}\n          >\n            {loading ? 'Loading...' : 'Analyze Performance'}\n          </button>\n        </div>\n      </div>\n\n      {/* Custom Range Table */}\n      {renderCustomRangeTable()}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,iBAAiB;AACxB,OAAOC,cAAc,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC;IAAEe,SAAS,EAAE,EAAE;IAAEC,OAAO,EAAE;EAAG,CAAC,CAAC;EAClE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACqB,OAAO,EAAEC,UAAU,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACuB,eAAe,EAAEC,kBAAkB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAMyB,oBAAoB,GAAGA,CAACV,SAAS,EAAEC,OAAO,KAAK;IACnD,MAAMU,OAAO,GAAG,EAAE;IAClB,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACb,SAAS,CAAC;IACjC,MAAMc,GAAG,GAAG,IAAID,IAAI,CAACZ,OAAO,CAAC;IAE7B,IAAIc,OAAO,GAAG,IAAIF,IAAI,CAACD,KAAK,CAACI,WAAW,CAAC,CAAC,EAAEJ,KAAK,CAACK,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;IAEhE,OAAOF,OAAO,IAAID,GAAG,EAAE;MACrB,MAAMI,UAAU,GAAG,IAAIL,IAAI,CAACE,OAAO,CAAC;MACpC,MAAMI,QAAQ,GAAG,IAAIN,IAAI,CAACE,OAAO,CAACC,WAAW,CAAC,CAAC,EAAED,OAAO,CAACE,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;;MAE3E;MACA,MAAMG,WAAW,GAAGF,UAAU,GAAGN,KAAK,GAAGA,KAAK,GAAGM,UAAU;MAC3D,MAAMG,SAAS,GAAGF,QAAQ,GAAGL,GAAG,GAAGA,GAAG,GAAGK,QAAQ;MAEjDR,OAAO,CAACW,IAAI,CAAC;QACXC,KAAK,EAAER,OAAO,CAACS,cAAc,CAAC,SAAS,EAAE;UAAEC,KAAK,EAAE,OAAO;UAAEC,IAAI,EAAE;QAAU,CAAC,CAAC;QAC7E1B,SAAS,EAAE2B,UAAU,CAACP,WAAW,CAAC;QAClCnB,OAAO,EAAE0B,UAAU,CAACN,SAAS,CAAC;QAC9BO,SAAS,EAAEV,UAAU,IAAIN,KAAK,IAAIO,QAAQ,IAAIL;MAChD,CAAC,CAAC;MAEFC,OAAO,CAACc,QAAQ,CAACd,OAAO,CAACE,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1C;IAEA,OAAON,OAAO;EAChB,CAAC;EAED,MAAMmB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI,CAAChC,KAAK,CAACE,SAAS,IAAI,CAACF,KAAK,CAACG,OAAO,EAAE;MACtC8B,KAAK,CAAC,wCAAwC,CAAC;MAC/C;IACF;IAEAxB,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMI,OAAO,GAAGD,oBAAoB,CAACZ,KAAK,CAACE,SAAS,EAAEF,KAAK,CAACG,OAAO,CAAC;MACpEQ,kBAAkB,CAACE,OAAO,CAAC;MAE3B,MAAMqB,UAAU,GAAG,MAAMC,OAAO,CAACC,GAAG,CAClCvB,OAAO,CAACwB,GAAG,CAAC,MAAOC,MAAM,IAAK;QAC5B,IAAI;UAAA,IAAAC,qBAAA;UACF;UACA,MAAM,CACJC,mBAAmB,EACnBC,kBAAkB,EAClBC,gBAAgB,EAChBC,mBAAmB,EACnBC,kBAAkB,CACnB,GAAG,MAAMT,OAAO,CAACC,GAAG,CAAC,CACpBhD,KAAK,CAACyD,GAAG,CAAC,wCAAwC,EAAE;YAClDC,MAAM,EAAE;cACNC,UAAU,EAAET,MAAM,CAACpC,SAAS;cAC5B8C,QAAQ,EAAEV,MAAM,CAACnC,OAAO;cACxB8C,SAAS,EAAE,EAAE;cACbC,OAAO,EAAE;YACX;UACF,CAAC,CAAC,EACF9D,KAAK,CAACyD,GAAG,CAAC,+CAA+C,EAAE;YACzDC,MAAM,EAAE;cACNC,UAAU,EAAET,MAAM,CAACpC,SAAS;cAC5B8C,QAAQ,EAAEV,MAAM,CAACnC,OAAO;cACxB8C,SAAS,EAAE,EAAE;cACbC,OAAO,EAAE;YACX;UACF,CAAC,CAAC,EACF9D,KAAK,CAACyD,GAAG,CAAC,+CAA+C,EAAE;YACzDC,MAAM,EAAE;cACNC,UAAU,EAAET,MAAM,CAACpC,SAAS;cAC5B8C,QAAQ,EAAEV,MAAM,CAACnC,OAAO;cACxB8C,SAAS,EAAE,EAAE;cACbC,OAAO,EAAE;YACX;UACF,CAAC,CAAC,EACF9D,KAAK,CAACyD,GAAG,CAAC,qCAAqC,EAAE;YAC/CC,MAAM,EAAE;cACNC,UAAU,EAAET,MAAM,CAACpC,SAAS;cAC5B8C,QAAQ,EAAEV,MAAM,CAACnC,OAAO;cACxB8C,SAAS,EAAE,EAAE;cACbC,OAAO,EAAE;YACX;UACF,CAAC,CAAC,EACF9D,KAAK,CAACyD,GAAG,CAAC,6CAA6C,EAAE;YACvDC,MAAM,EAAE;cACNC,UAAU,EAAET,MAAM,CAACpC,SAAS;cAC5B8C,QAAQ,EAAEV,MAAM,CAACnC,OAAO;cACxB8C,SAAS,EAAE,EAAE;cACbC,OAAO,EAAE;YACX;UACF,CAAC,CAAC,CACH,CAAC;UAEF,OAAO;YACLZ,MAAM,EAAEA,MAAM,CAACb,KAAK;YACpBvB,SAAS,EAAEoC,MAAM,CAACpC,SAAS;YAC3BC,OAAO,EAAEmC,MAAM,CAACnC,OAAO;YACvBgD,QAAQ,EAAEX,mBAAmB,CAACpC,IAAI,CAACgD,GAAG,IAAI,CAAC;YAC3CC,qBAAqB,EAAEZ,kBAAkB,CAACrC,IAAI,CAACkD,WAAW,IAAI,CAAC;YAC/DC,qBAAqB,EAAE,EAAAhB,qBAAA,GAAAG,gBAAgB,CAACtC,IAAI,CAACoD,YAAY,cAAAjB,qBAAA,uBAAlCA,qBAAA,CAAoCkB,MAAM,KAAI,CAAC;YACtEC,WAAW,EAAEf,mBAAmB,CAACvC,IAAI,CAACgD,GAAG,IAAI,CAAC;YAC9CO,UAAU,EAAEf,kBAAkB,CAACxC,IAAI,CAACwD,WAAW,IAAI,CAAC;YACpDC,cAAc,EAAErB,mBAAmB,CAACpC,IAAI,CAACgD,GAAG,IAAI,CAAC,CAAC;UACpD,CAAC;QACH,CAAC,CAAC,OAAOU,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCxB,MAAM,CAACb,KAAK,GAAG,EAAEqC,KAAK,CAAC;UACvE,OAAO;YACLxB,MAAM,EAAEA,MAAM,CAACb,KAAK;YACpBvB,SAAS,EAAEoC,MAAM,CAACpC,SAAS;YAC3BC,OAAO,EAAEmC,MAAM,CAACnC,OAAO;YACvBgD,QAAQ,EAAE,CAAC;YACXE,qBAAqB,EAAE,CAAC;YACxBE,qBAAqB,EAAE,CAAC;YACxBG,WAAW,EAAE,CAAC;YACdC,UAAU,EAAE,CAAC;YACbE,cAAc,EAAE,CAAC;YACjBC,KAAK,EAAE;UACT,CAAC;QACH;MACF,CAAC,CACH,CAAC;MAEDvD,kBAAkB,CAAC2B,UAAU,CAAC;IAChC,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD7B,KAAK,CAAC,wCAAwC,CAAC;IACjD,CAAC,SAAS;MACRxB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMuD,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM7E,KAAK,CAACyD,GAAG,CAAC,wCAAwC,EAAE;QACzEC,MAAM,EAAE;UACNC,UAAU,EAAE/C,KAAK,CAACE,SAAS;UAC3B8C,QAAQ,EAAEhD,KAAK,CAACG,OAAO;UACvB8C,SAAS,EAAE,EAAE;UACbC,OAAO,EAAE;QACX;MACF,CAAC,CAAC;MACF7C,OAAO,CAAC4D,QAAQ,CAAC7D,IAAI,CAAC;IACxB,CAAC,CAAC,OAAO0D,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACzC;EACF,CAAC;;EAED;EACA,MAAMjC,UAAU,GAAIqC,IAAI,IAAK;IAC3B,MAAMtC,IAAI,GAAGsC,IAAI,CAAChD,WAAW,CAAC,CAAC;IAC/B,MAAMS,KAAK,GAAGwC,MAAM,CAACD,IAAI,CAAC/C,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACiD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC1D,MAAMC,GAAG,GAAGF,MAAM,CAACD,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IACnD,OAAO,GAAGxC,IAAI,IAAID,KAAK,IAAI0C,GAAG,EAAE;EAClC,CAAC;;EAED;EACA,MAAME,cAAc,GAAIL,IAAI,IAAK;IAC/B,MAAMM,WAAW,GAAG,IAAIzD,IAAI,CAACmD,IAAI,CAAC;IAClC,MAAMG,GAAG,GAAGG,WAAW,CAACC,MAAM,CAAC,CAAC;IAChC,MAAMC,IAAI,GAAGF,WAAW,CAACF,OAAO,CAAC,CAAC,GAAGD,GAAG,IAAIA,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/DG,WAAW,CAACG,OAAO,CAACD,IAAI,CAAC;IACzB,OAAO7C,UAAU,CAAC2C,WAAW,CAAC;EAChC,CAAC;;EAED;EACA,MAAMI,eAAe,GAAIV,IAAI,IAAK;IAChC,MAAMW,YAAY,GAAG,IAAI9D,IAAI,CAACmD,IAAI,CAAC;IACnCW,YAAY,CAACF,OAAO,CAAC,CAAC,CAAC;IACvB,OAAO9C,UAAU,CAACgD,YAAY,CAAC;EACjC,CAAC;;EAED;EACA,MAAMC,yBAAyB,GAAGA,CAAC7D,OAAO,EAAE8D,QAAQ,KAAK;IACvD,IAAIA,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAO9D,OAAO,GAAG,CAAC,GAAG,SAAS,GAAG,MAAM;IACzC;IACA,MAAM+D,MAAM,GAAI,CAAC/D,OAAO,GAAG8D,QAAQ,IAAIA,QAAQ,GAAI,GAAG;IACtD,MAAME,IAAI,GAAGD,MAAM,IAAI,CAAC,GAAG,GAAG,GAAG,EAAE;IACnC,OAAO,GAAGC,IAAI,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC,GAAG;EACvC,CAAC;;EAED;EACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI7E,eAAe,CAACmD,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;IAE3C,OAAO;MACLN,QAAQ,EAAE7C,eAAe,CAAC8E,MAAM,CAAC,CAACC,GAAG,EAAE/C,MAAM,KAAK+C,GAAG,GAAG/C,MAAM,CAACa,QAAQ,EAAE,CAAC,CAAC;MAC3EE,qBAAqB,EAAE/C,eAAe,CAAC8E,MAAM,CAAC,CAACC,GAAG,EAAE/C,MAAM,KAAK+C,GAAG,GAAG/C,MAAM,CAACe,qBAAqB,EAAE,CAAC,CAAC;MACrGE,qBAAqB,EAAE+B,IAAI,CAACC,GAAG,CAAC,GAAGjF,eAAe,CAAC+B,GAAG,CAACC,MAAM,IAAIA,MAAM,CAACiB,qBAAqB,CAAC,EAAE,CAAC,CAAC;MAClGG,WAAW,EAAEpD,eAAe,CAAC8E,MAAM,CAAC,CAACC,GAAG,EAAE/C,MAAM,KAAK+C,GAAG,GAAG/C,MAAM,CAACoB,WAAW,EAAE,CAAC,CAAC,GAAGpD,eAAe,CAACmD,MAAM;MAC1GE,UAAU,EAAErD,eAAe,CAAC8E,MAAM,CAAC,CAACC,GAAG,EAAE/C,MAAM,KAAK+C,GAAG,GAAG/C,MAAM,CAACqB,UAAU,EAAE,CAAC,CAAC,GAAGrD,eAAe,CAACmD,MAAM;MACxGI,cAAc,EAAEvD,eAAe,CAAC8E,MAAM,CAAC,CAACC,GAAG,EAAE/C,MAAM,KAAK+C,GAAG,GAAG/C,MAAM,CAACuB,cAAc,EAAE,CAAC;IACxF,CAAC;EACH,CAAC;EAED3E,SAAS,CAAC,MAAM;IACd,MAAMsG,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,WAAW,GAAG,IAAI1E,IAAI,CAAC,CAAC;;QAE9B;QACA,MAAM2E,SAAS,GAAG,IAAI3E,IAAI,CAAC0E,WAAW,CAAC;QACvCC,SAAS,CAACf,OAAO,CAACc,WAAW,CAACnB,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;QAC5C,MAAMqB,kBAAkB,GAAG9D,UAAU,CAAC6D,SAAS,CAAC;;QAEhD;QACA,MAAMlB,WAAW,GAAGD,cAAc,CAACkB,WAAW,CAAC;QAC/C,MAAMG,kBAAkB,GAAG/D,UAAU,CAAC,IAAId,IAAI,CAAC0E,WAAW,CAAC,CAAC;;QAE5D;QACA,MAAMZ,YAAY,GAAGD,eAAe,CAACa,WAAW,CAAC;QACjD,MAAMI,mBAAmB,GAAGhE,UAAU,CAAC4D,WAAW,CAAC;;QAEnD;QACA,MAAMK,4BAA4B,GAAG,MAAM1G,KAAK,CAACyD,GAAG,CAAC,wCAAwC,EAAE;UAC7FC,MAAM,EAAE;YACNC,UAAU,EAAE4C,kBAAkB;YAC9B3C,QAAQ,EAAE2C,kBAAkB;YAC5B1C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;;QAEF;QACA,MAAM6C,8BAA8B,GAAG,MAAM3G,KAAK,CAACyD,GAAG,CAAC,wCAAwC,EAAE;UAC/FC,MAAM,EAAE;YACNC,UAAU,EAAEyB,WAAW;YACvBxB,QAAQ,EAAE4C,kBAAkB;YAC5B3C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;;QAEF;QACA,MAAM8C,8BAA8B,GAAG,MAAM5G,KAAK,CAACyD,GAAG,CAAC,wCAAwC,EAAE;UAC/FC,MAAM,EAAE;YACNC,UAAU,EAAE8B,YAAY;YACxB7B,QAAQ,EAAE6C,mBAAmB;YAC7B5C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;;QAEF;QACA,MAAM+C,mBAAmB,GAAG,MAAM7G,KAAK,CAACyD,GAAG,CAAC,+CAA+C,EAAE;UAC3FC,MAAM,EAAE;YACNC,UAAU,EAAE4C,kBAAkB;YAC9B3C,QAAQ,EAAE2C,kBAAkB;YAC5B1C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QAEF,MAAMgD,qBAAqB,GAAG,MAAM9G,KAAK,CAACyD,GAAG,CAAC,+CAA+C,EAAE;UAC7FC,MAAM,EAAE;YACNC,UAAU,EAAEyB,WAAW;YACvBxB,QAAQ,EAAE4C,kBAAkB;YAC5B3C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QAEF,MAAMiD,qBAAqB,GAAG,MAAM/G,KAAK,CAACyD,GAAG,CAAC,+CAA+C,EAAE;UAC7FC,MAAM,EAAE;YACNC,UAAU,EAAE8B,YAAY;YACxB7B,QAAQ,EAAE6C,mBAAmB;YAC7B5C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;;QAEF;QACA,MAAMkD,qBAAqB,GAAG,MAAMhH,KAAK,CAACyD,GAAG,CAAC,+CAA+C,EAAE;UAC7FC,MAAM,EAAE;YACNC,UAAU,EAAE4C,kBAAkB;YAC9B3C,QAAQ,EAAE2C,kBAAkB;YAC5B1C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QACF,MAAMmD,sBAAsB,GAAG,MAAMjH,KAAK,CAACyD,GAAG,CAAC,+CAA+C,EAAE;UAC9FC,MAAM,EAAE;YACNC,UAAU,EAAEyB,WAAW;YACvBxB,QAAQ,EAAE4C,kBAAkB;YAC5B3C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QACF,MAAMoD,uBAAuB,GAAG,MAAMlH,KAAK,CAACyD,GAAG,CAAC,+CAA+C,EAAE;UAC/FC,MAAM,EAAE;YACNyD,UAAU,EAAE1B,YAAY;YACxB2B,QAAQ,EAAEX,mBAAmB;YAC7B5C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QAEF,MAAMuD,gBAAgB,GAAG,MAAMrH,KAAK,CAACyD,GAAG,CAAC,qCAAqC,EAAE;UAC9EC,MAAM,EAAE;YACNC,UAAU,EAAE4C,kBAAkB;YAC9B3C,QAAQ,EAAE2C,kBAAkB;YAC5B1C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QACF,MAAMwD,iBAAiB,GAAG,MAAMtH,KAAK,CAACyD,GAAG,CAAC,qCAAqC,EAAE;UAC/EC,MAAM,EAAE;YACNC,UAAU,EAAEyB,WAAW;YACvBxB,QAAQ,EAAE4C,kBAAkB;YAC5B3C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QACF,MAAMyD,kBAAkB,GAAG,MAAMvH,KAAK,CAACyD,GAAG,CAAC,qCAAqC,EAAE;UAChFC,MAAM,EAAE;YACNyD,UAAU,EAAE1B,YAAY;YACxB2B,QAAQ,EAAEX,mBAAmB;YAC7B5C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QACF,MAAM0D,eAAe,GAAG,MAAMxH,KAAK,CAACyD,GAAG,CAAC,6CAA6C,EAAE;UACrFC,MAAM,EAAE;YACNC,UAAU,EAAE4C,kBAAkB;YAC9B3C,QAAQ,EAAE2C,kBAAkB;YAC5B1C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QACF,MAAM2D,gBAAgB,GAAG,MAAMzH,KAAK,CAACyD,GAAG,CAAC,6CAA6C,EAAE;UACtFC,MAAM,EAAE;YACNC,UAAU,EAAEyB,WAAW;YACvBxB,QAAQ,EAAE4C,kBAAkB;YAC5B3C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;QACF,MAAM4D,iBAAiB,GAAG,MAAM1H,KAAK,CAACyD,GAAG,CAAC,6CAA6C,EAAE;UACvFC,MAAM,EAAE;YACNyD,UAAU,EAAE1B,YAAY;YACxB2B,QAAQ,EAAEX,mBAAmB;YAC7B5C,SAAS,EAAE,EAAE;YACbC,OAAO,EAAE;UACX;QACF,CAAC,CAAC;;QAEF;QACAvD,gBAAgB,CAAC;UACfwD,QAAQ,EAAE2C,4BAA4B,CAAC1F,IAAI,CAACgD,GAAG;UAC/CC,qBAAqB,EAAE4C,mBAAmB,CAAC7F,IAAI,CAACkD,WAAW;UAC3DC,qBAAqB,EAAE6C,qBAAqB,CAAChG,IAAI,CAACoD,YAAY,CAACC,MAAM;UACrEsD,WAAW,EAAEN,gBAAgB,CAACrG,IAAI,CAACgD,GAAG;UACtC4D,UAAU,EAAEJ,eAAe,CAACxG,IAAI,CAACwD,WAAW;UAC5CqD,cAAc,EAAEnB,4BAA4B,CAAC1F,IAAI,CAACgD;QACpD,CAAC,CAAC;QAEFvD,kBAAkB,CAAC;UACjBsD,QAAQ,EAAE4C,8BAA8B,CAAC3F,IAAI,CAACgD,GAAG;UACjDC,qBAAqB,EAAE6C,qBAAqB,CAAC9F,IAAI,CAACkD,WAAW;UAC7DC,qBAAqB,EAAE8C,sBAAsB,CAACjG,IAAI,CAACoD,YAAY,CAACC,MAAM;UACtEsD,WAAW,EAAEL,iBAAiB,CAACtG,IAAI,CAACgD,GAAG;UACvC4D,UAAU,EAAEH,gBAAgB,CAACzG,IAAI,CAACwD,WAAW;UAC7CqD,cAAc,EAAElB,8BAA8B,CAAC3F,IAAI,CAACgD;QACtD,CAAC,CAAC;QAEFrD,kBAAkB,CAAC;UACjBoD,QAAQ,EAAE6C,8BAA8B,CAAC5F,IAAI,CAACgD,GAAG;UACjDC,qBAAqB,EAAE8C,qBAAqB,CAAC/F,IAAI,CAACkD,WAAW;UAC7DC,qBAAqB,EAAE+C,uBAAuB,CAAClG,IAAI,CAACoD,YAAY,CAACC,MAAM;UACvEsD,WAAW,EAAEJ,kBAAkB,CAACvG,IAAI,CAACgD,GAAG;UACxC4D,UAAU,EAAEF,iBAAiB,CAAC1G,IAAI,CAACwD,WAAW;UAC9CqD,cAAc,EAAEjB,8BAA8B,CAAC5F,IAAI,CAACgD;QACtD,CAAC,CAAC;MAEJ,CAAC,CAAC,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAED0B,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM0B,cAAc,GAAIC,MAAM,IAAK;IACjC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;MACpCC,KAAK,EAAE,UAAU;MACjBC,QAAQ,EAAE,KAAK;MACfC,qBAAqB,EAAE;IACzB,CAAC,CAAC,CAACC,MAAM,CAACN,MAAM,CAAC;EACnB,CAAC;EAED,MAAMO,gBAAgB,GAAIC,KAAK,IAAK;IAClC,OAAO,GAAGA,KAAK,CAACzC,OAAO,CAAC,CAAC,CAAC,GAAG;EAC/B,CAAC;EAED,MAAM0C,WAAW,GAAGA,CAACxH,IAAI,EAAEyH,KAAK,EAAEvF,MAAM,EAAEwF,OAAO,kBAC/CvI,OAAA;IAAKwI,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BzI,OAAA;MAAKwI,SAAS,EAAE,gBAAgBD,OAAO,EAAG;MAAAE,QAAA,gBACxCzI,OAAA;QAAAyI,QAAA,EAAKH;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAChB7I,OAAA;QAAMwI,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAE1F;MAAM;QAAA2F,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,eACN7I,OAAA;MAAKwI,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BzI,OAAA;QAAKwI,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBzI,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC/C7I,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAEd,cAAc,CAAC9G,IAAI,CAAC+C,QAAQ;QAAC;UAAA8E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC,eACN7I,OAAA;QAAKwI,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBzI,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7D7I,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAEd,cAAc,CAAC9G,IAAI,CAACiD,qBAAqB;QAAC;UAAA4E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/E,CAAC,eACN7I,OAAA;QAAKwI,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBzI,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7D7I,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAE5H,IAAI,CAACmD;QAAqB;UAAA0E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D,CAAC,eACN7I,OAAA;QAAKwI,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBzI,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACnD7I,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAE5H,IAAI,CAAC2G;QAAW;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,eACN7I,OAAA;QAAKwI,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBzI,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACjD7I,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAE5H,IAAI,CAAC4G;QAAU;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC,eACN7I,OAAA;QAAKwI,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBzI,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAuB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC7D7I,OAAA;UAAMwI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAE5H,IAAI,CAAC6G;QAAc;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CACN;;EAED;EACA,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAI/H,eAAe,CAACmD,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAE7C,MAAM6E,MAAM,GAAGnD,eAAe,CAAC,CAAC;IAEhC,oBACE5F,OAAA;MAAKwI,SAAS,EAAC,8BAA8B;MAAAC,QAAA,gBAC3CzI,OAAA;QAAKwI,SAAS,EAAC,qBAAqB;QAAAC,QAAA,gBAClCzI,OAAA;UAAAyI,QAAA,EAAI;QAAoB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7B7I,OAAA;UAAGwI,SAAS,EAAC,iBAAiB;UAAAC,QAAA,GAAC,OACxB,EAAChI,KAAK,CAACE,SAAS,EAAC,MAAI,EAACF,KAAK,CAACG,OAAO;QAAA;UAAA8H,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAEN7I,OAAA;QAAKwI,SAAS,EAAC,mBAAmB;QAAAC,QAAA,eAChCzI,OAAA;UAAOwI,SAAS,EAAC,YAAY;UAAAC,QAAA,gBAC3BzI,OAAA;YAAAyI,QAAA,eACEzI,OAAA;cAAAyI,QAAA,gBACEzI,OAAA;gBAAIwI,SAAS,EAAC,kBAAkB;gBAAAC,QAAA,EAAC;cAAc;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EACnD9H,eAAe,CAAC+B,GAAG,CAAC,CAACC,MAAM,EAAEiG,KAAK,kBACjChJ,OAAA;gBAAgBwI,SAAS,EAAC,eAAe;gBAAAC,QAAA,EACtC1F,MAAM,CAACA;cAAM,GADPiG,KAAK;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAEV,CACL,CAAC,eACF7I,OAAA;gBAAIwI,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC,eACR7I,OAAA;YAAAyI,QAAA,gBACEzI,OAAA;cAAIwI,SAAS,EAAC,gBAAgB;cAAAC,QAAA,eAC5BzI,OAAA;gBAAIiJ,OAAO,EAAElI,eAAe,CAACmD,MAAM,GAAG,CAAE;gBAAAuE,QAAA,EAAC;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7D,CAAC,eAEL7I,OAAA;cAAAyI,QAAA,gBACEzI,OAAA;gBAAIwI,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EAC1C9H,eAAe,CAAC+B,GAAG,CAAC,CAACC,MAAM,EAAEiG,KAAK,kBACjChJ,OAAA;gBAAgBwI,SAAS,EAAC,aAAa;gBAAAC,QAAA,gBACrCzI,OAAA;kBAAKwI,SAAS,EAAC,cAAc;kBAAAC,QAAA,EAAEd,cAAc,CAAC5E,MAAM,CAACa,QAAQ;gBAAC;kBAAA8E,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eACrE7I,OAAA;kBAAKwI,SAAS,EAAE,iBAAiBzF,MAAM,CAACa,QAAQ,GAAG,CAAC,GAAG,UAAU,GAAG,SAAS,EAAG;kBAAA6E,QAAA,GAC7E1F,MAAM,CAACa,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,CAAEb,MAAM,CAACa,QAAQ,IAAImF,MAAM,CAACnF,QAAQ,IAAI,CAAC,CAAC,GAAI,GAAG,EAAE+B,OAAO,CAAC,CAAC,CAAC,EAAC,GACjG;gBAAA;kBAAA+C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA,GAJCG,KAAK;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKV,CACL,CAAC,eACF7I,OAAA;gBAAIwI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAEd,cAAc,CAACoB,MAAM,CAACnF,QAAQ;cAAC;gBAAA8E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/D,CAAC,eAEL7I,OAAA;cAAAyI,QAAA,gBACEzI,OAAA;gBAAIwI,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAuB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EACxD9H,eAAe,CAAC+B,GAAG,CAAC,CAACC,MAAM,EAAEiG,KAAK,kBACjChJ,OAAA;gBAAgBwI,SAAS,EAAC,aAAa;gBAAAC,QAAA,gBACrCzI,OAAA;kBAAKwI,SAAS,EAAC,cAAc;kBAAAC,QAAA,EAAEd,cAAc,CAAC5E,MAAM,CAACe,qBAAqB;gBAAC;kBAAA4E,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAClF7I,OAAA;kBAAKwI,SAAS,EAAE,iBAAiBzF,MAAM,CAACe,qBAAqB,GAAG,CAAC,GAAG,UAAU,GAAG,SAAS,EAAG;kBAAA2E,QAAA,GAC1F1F,MAAM,CAACe,qBAAqB,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,CAAEf,MAAM,CAACe,qBAAqB,IAAIiF,MAAM,CAACjF,qBAAqB,IAAI,CAAC,CAAC,GAAI,GAAG,EAAE6B,OAAO,CAAC,CAAC,CAAC,EAAC,GACxI;gBAAA;kBAAA+C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA,GAJCG,KAAK;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKV,CACL,CAAC,eACF7I,OAAA;gBAAIwI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAEd,cAAc,CAACoB,MAAM,CAACjF,qBAAqB;cAAC;gBAAA4E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5E,CAAC,eAEL7I,OAAA;cAAAyI,QAAA,gBACEzI,OAAA;gBAAIwI,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAuB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EACxD9H,eAAe,CAAC+B,GAAG,CAAC,CAACC,MAAM,EAAEiG,KAAK,kBACjChJ,OAAA;gBAAgBwI,SAAS,EAAC,aAAa;gBAAAC,QAAA,gBACrCzI,OAAA;kBAAKwI,SAAS,EAAC,cAAc;kBAAAC,QAAA,EAAE1F,MAAM,CAACiB;gBAAqB;kBAAA0E,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAClE7I,OAAA;kBAAKwI,SAAS,EAAC,uBAAuB;kBAAAC,QAAA,GACnC1F,MAAM,CAACiB,qBAAqB,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAEjB,MAAM,CAACiB,qBAAqB;gBAAA;kBAAA0E,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACvE,CAAC;cAAA,GAJCG,KAAK;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKV,CACL,CAAC,eACF7I,OAAA;gBAAIwI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAEM,MAAM,CAAC/E;cAAqB;gBAAA0E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5D,CAAC,eAEL7I,OAAA;cAAAyI,QAAA,gBACEzI,OAAA;gBAAIwI,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EAC9C9H,eAAe,CAAC+B,GAAG,CAAC,CAACC,MAAM,EAAEiG,KAAK,kBACjChJ,OAAA;gBAAgBwI,SAAS,EAAC,aAAa;gBAAAC,QAAA,gBACrCzI,OAAA;kBAAKwI,SAAS,EAAC,cAAc;kBAAAC,QAAA,EAAEd,cAAc,CAAC5E,MAAM,CAACoB,WAAW;gBAAC;kBAAAuE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eACxE7I,OAAA;kBAAKwI,SAAS,EAAE,iBAAiBzF,MAAM,CAACoB,WAAW,GAAG,CAAC,GAAG,UAAU,GAAG,SAAS,EAAG;kBAAAsE,QAAA,GAChF1F,MAAM,CAACoB,WAAW,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAEgE,gBAAgB,CAAEpF,MAAM,CAACoB,WAAW,IAAI4E,MAAM,CAAC5E,WAAW,IAAI,CAAC,CAAC,GAAI,GAAG,CAAC;gBAAA;kBAAAuE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACzG,CAAC;cAAA,GAJCG,KAAK;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKV,CACL,CAAC,eACF7I,OAAA;gBAAIwI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAEd,cAAc,CAACoB,MAAM,CAAC5E,WAAW;cAAC;gBAAAuE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClE,CAAC,eAEL7I,OAAA;cAAAyI,QAAA,gBACEzI,OAAA;gBAAIwI,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAW;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EAC5C9H,eAAe,CAAC+B,GAAG,CAAC,CAACC,MAAM,EAAEiG,KAAK,kBACjChJ,OAAA;gBAAgBwI,SAAS,EAAC,aAAa;gBAAAC,QAAA,gBACrCzI,OAAA;kBAAKwI,SAAS,EAAC,cAAc;kBAAAC,QAAA,EAAEN,gBAAgB,CAACpF,MAAM,CAACqB,UAAU;gBAAC;kBAAAsE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eACzE7I,OAAA;kBAAKwI,SAAS,EAAE,iBAAiBzF,MAAM,CAACqB,UAAU,GAAG2E,MAAM,CAAC3E,UAAU,GAAG,UAAU,GAAG,UAAU,EAAG;kBAAAqE,QAAA,GAChG1F,MAAM,CAACqB,UAAU,GAAG2E,MAAM,CAAC3E,UAAU,GAAG,GAAG,GAAG,GAAG,EAAE2B,IAAI,CAACmD,GAAG,CAACnG,MAAM,CAACqB,UAAU,GAAG2E,MAAM,CAAC3E,UAAU,CAAC,CAACuB,OAAO,CAAC,CAAC,CAAC,EAAC,GACjH;gBAAA;kBAAA+C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA,GAJCG,KAAK;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKV,CACL,CAAC,eACF7I,OAAA;gBAAIwI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAEN,gBAAgB,CAACY,MAAM,CAAC3E,UAAU;cAAC;gBAAAsE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnE,CAAC,eAEL7I,OAAA;cAAAyI,QAAA,gBACEzI,OAAA;gBAAIwI,SAAS,EAAC,cAAc;gBAAAC,QAAA,EAAC;cAAuB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,EACxD9H,eAAe,CAAC+B,GAAG,CAAC,CAACC,MAAM,EAAEiG,KAAK,kBACjChJ,OAAA;gBAAgBwI,SAAS,EAAC,aAAa;gBAAAC,QAAA,gBACrCzI,OAAA;kBAAKwI,SAAS,EAAC,cAAc;kBAAAC,QAAA,EAAEd,cAAc,CAAC5E,MAAM,CAACuB,cAAc;gBAAC;kBAAAoE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,eAC3E7I,OAAA;kBAAKwI,SAAS,EAAE,iBAAiBzF,MAAM,CAACuB,cAAc,GAAG,CAAC,GAAG,UAAU,GAAG,SAAS,EAAG;kBAAAmE,QAAA,GACnF1F,MAAM,CAACuB,cAAc,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,CAAEvB,MAAM,CAACuB,cAAc,IAAIyE,MAAM,CAACzE,cAAc,IAAI,CAAC,CAAC,GAAI,GAAG,EAAEqB,OAAO,CAAC,CAAC,CAAC,EAAC,GACnH;gBAAA;kBAAA+C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA,GAJCG,KAAK;gBAAAN,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAKV,CACL,CAAC,eACF7I,OAAA;gBAAIwI,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAEd,cAAc,CAACoB,MAAM,CAACzE,cAAc;cAAC;gBAAAoE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACA,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV,CAAC;EAED,oBACE7I,OAAA;IAAKwI,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAElCzI,OAAA;MAAKwI,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAC9BJ,WAAW,CACVlI,aAAa,EACb,WAAW,EACX,cAAcmC,UAAU,CAAC,IAAId,IAAI,CAAC,CAAC,CAAC,GAAG,EACvC,aACF,CAAC,EACA6G,WAAW,CACVhI,eAAe,EACf,cAAc,EACd,SAAS2E,cAAc,CAAC,IAAIxD,IAAI,CAAC,CAAC,CAAC,MAAMc,UAAU,CAAC,IAAId,IAAI,CAAC,CAAC,CAAC,GAAG,EAClE,cACF,CAAC,EACA6G,WAAW,CACV9H,eAAe,EACf,eAAe,EACf,UAAU8E,eAAe,CAAC,IAAI7D,IAAI,CAAC,CAAC,CAAC,MAAMc,UAAU,CAAC,IAAId,IAAI,CAAC,CAAC,CAAC,GAAG,EACpE,YACF,CAAC;IAAA;MAAAkH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAGN7I,OAAA;MAAKwI,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eACjCzI,OAAA;QAAKwI,SAAS,EAAC,uBAAuB;QAAAC,QAAA,gBACpCzI,OAAA;UAAAyI,QAAA,EAAI;QAA0B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnC7I,OAAA,CAACF,cAAc;UAACqJ,aAAa,EAAEzI;QAAS;UAAAgI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC3C7I,OAAA;UACEwI,SAAS,EAAC,cAAc;UACxBY,OAAO,EAAE3G,oBAAqB;UAC9B4G,QAAQ,EAAE,CAAC5I,KAAK,CAACE,SAAS,IAAI,CAACF,KAAK,CAACG,OAAO,IAAIK,OAAQ;UAAAwH,QAAA,EAEvDxH,OAAO,GAAG,YAAY,GAAG;QAAqB;UAAAyH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAGLC,sBAAsB,CAAC,CAAC;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEV,CAAC;AAAC3I,EAAA,CAvlBID,SAAS;AAAAqJ,EAAA,GAATrJ,SAAS;AAylBf,eAAeA,SAAS;AAAC,IAAAqJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}