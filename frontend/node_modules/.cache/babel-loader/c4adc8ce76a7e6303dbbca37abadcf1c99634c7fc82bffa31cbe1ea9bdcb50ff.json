{"ast":null,"code":"var _jsxFileName = \"/Users/yousafzahid/Documents/GitHub/TT_app/frontend/src/components/Dashboard.jsx\",\n  _s = $RefreshSig$();\n// export default Dashboard;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport \"./Dashboard.css\";\nimport DatePickerCard from './Datepicker';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n  const [dates, setDates] = useState({\n    startDate: '',\n    endDate: ''\n  });\n  // const [data, setData] = useState(null);\n  const [customRangeData, setCustomRangeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  // const [selectedPeriods, setSelectedPeriods] = useState([]);\n\n  // Function to generate month periods between start and end date\n  const generateMonthPeriods = (startDate, endDate) => {\n    const periods = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    let current = new Date(start.getFullYear(), start.getMonth(), 1);\n    while (current <= end) {\n      const monthStart = new Date(current);\n      const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0);\n\n      // Adjust for the actual range\n      const periodStart = monthStart < start ? start : monthStart;\n      const periodEnd = monthEnd > end ? end : monthEnd;\n      periods.push({\n        label: current.toLocaleString('default', {\n          month: 'short',\n          year: 'numeric'\n        }),\n        startDate: formatDate(periodStart),\n        endDate: formatDate(periodEnd),\n        fullMonth: monthStart >= start && monthEnd <= end\n      });\n      current.setMonth(current.getMonth() + 1);\n    }\n    return periods;\n  };\n  const fetchCustomRangeData = async () => {\n    if (!dates.startDate || !dates.endDate) {\n      alert('Please select both start and end dates');\n      return;\n    }\n    setLoading(true);\n    try {\n      const periods = generateMonthPeriods(dates.startDate, dates.endDate);\n      const periodData = await Promise.all(periods.map(async period => {\n        try {\n          var _creatorsResponse$dat;\n          // Fetch all required data for this period\n          const [performanceResponse, flashSalesResponse, creatorsResponse, gmvPerVideoResponse, refundRateResponse] = await Promise.all([axios.get('/api/shop/performance', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          }), axios.get('/api/flash_sales_performance', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          }), axios.get('/api/top_performing_creators', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          }), axios.get('/api/Gmv_per_video', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          }), axios.get('/api/calculate_refund_rate', {\n            params: {\n              start_time: period.startDate,\n              end_time: period.endDate,\n              page_size: 10,\n              page_no: 1\n            }\n          })]);\n          return {\n            period: period.label,\n            startDate: period.startDate,\n            endDate: period.endDate,\n            totalGmv: performanceResponse.data.gmv || 0,\n            flashSalesPerformance: flashSalesResponse.data.total_sales || 0,\n            topPerformingCreators: ((_creatorsResponse$dat = creatorsResponse.data.top_creators) === null || _creatorsResponse$dat === void 0 ? void 0 : _creatorsResponse$dat.length) || 0,\n            gmvPerVideo: gmvPerVideoResponse.data.gmv || 0,\n            refundRate: refundRateResponse.data.refund_rate || 0,\n            tiktokCampaign: performanceResponse.data.gmv || 0 // Using GMV as campaign outcome\n          };\n        } catch (error) {\n          console.error(`Error fetching data for period ${period.label}:`, error);\n          return {\n            period: period.label,\n            startDate: period.startDate,\n            endDate: period.endDate,\n            totalGmv: 0,\n            flashSalesPerformance: 0,\n            topPerformingCreators: 0,\n            gmvPerVideo: 0,\n            refundRate: 0,\n            tiktokCampaign: 0,\n            error: true\n          };\n        }\n      }));\n      setCustomRangeData(periodData);\n    } catch (error) {\n      console.error('Error fetching custom range data:', error);\n      alert('Error fetching data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // const fetchPerformance = async () => {\n  //   try {\n  //     const response = await axios.get('/api/shop/performance', {\n  //       params: {\n  //         start_time: dates.startDate,\n  //         end_time: dates.endDate,\n  //         page_size: 10,\n  //         page_no: 1,\n  //       },\n  //     });\n  //     setData(response.data);\n  //   } catch (error) {\n  //     console.error('API call error:', error);\n  //   }\n  // };\n\n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = useCallback(date => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  }, []);\n  const getStartOfMonth = useCallback(date => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1);\n    return formatDate(startOfMonth);\n  }, []);\n\n  // Calculate percentage change\n  // const calculatePercentageChange = (current, previous) => {\n  //   if (previous === 0) {\n  //     return current > 0 ? '+100.0%' : '0.0%';\n  //   }\n  //   const change = ((current - previous) / previous) * 100;\n  //   const sign = change >= 0 ? '+' : '';\n  //   return `${sign}${change.toFixed(1)}%`;\n  // };\n\n  // Calculate totals for the custom range table\n  const calculateTotals = () => {\n    if (customRangeData.length === 0) return {};\n    return {\n      totalGmv: customRangeData.reduce((sum, period) => sum + period.totalGmv, 0),\n      flashSalesPerformance: customRangeData.reduce((sum, period) => sum + period.flashSalesPerformance, 0),\n      topPerformingCreators: Math.max(...customRangeData.map(period => period.topPerformingCreators), 0),\n      gmvPerVideo: customRangeData.reduce((sum, period) => sum + period.gmvPerVideo, 0) / customRangeData.length,\n      refundRate: customRangeData.reduce((sum, period) => sum + period.refundRate, 0) / customRangeData.length,\n      tiktokCampaign: customRangeData.reduce((sum, period) => sum + period.tiktokCampaign, 0)\n    };\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate));\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate);\n\n        // Fetch performance data for yesterday\n        const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current week\n        const currentWeekPerformanceResponse = await axios.get('/api/shop/performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current month\n        const monthToDatePerformanceResponse = await axios.get('/api/shop/performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch flash sales performance \n        const yesterdayflashsales = await axios.get('/api/flash_sales_performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const currentWeekflashsales = await axios.get('/api/flash_sales_performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthToDateflashsales = await axios.get('/api/flash_sales_performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch top-performing creators for each period\n        const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          totalGmv: yesterdayPerformanceResponse.data.gmv,\n          flashSalesPerformance: yesterdayflashsales.data.total_sales,\n          topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n          gmvpervideo: dailygmvPervideo.data.gmv,\n          refundrate: dailyRefundrate.data.refund_rate,\n          Tiktokcompaign: yesterdayPerformanceResponse.data.gmv\n        });\n        setCurrentWeekData({\n          totalGmv: currentWeekPerformanceResponse.data.gmv,\n          flashSalesPerformance: currentWeekflashsales.data.total_sales,\n          topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n          gmvpervideo: weeklygmvPervideo.data.gmv,\n          refundrate: weeklyRefundrate.data.refund_rate,\n          Tiktokcompaign: currentWeekPerformanceResponse.data.gmv\n        });\n        setMonthToDateData({\n          totalGmv: monthToDatePerformanceResponse.data.gmv,\n          flashSalesPerformance: monthToDateflashsales.data.total_sales,\n          topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n          gmvpervideo: monthlygmvPervideo.data.gmv,\n          refundrate: monthlyRefundrate.data.refund_rate,\n          Tiktokcompaign: monthToDatePerformanceResponse.data.gmv\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, [getStartOfMonth, getStartOfWeek]);\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n  const formatPercentage = value => {\n    return `${value.toFixed(1)}%`;\n  };\n  const renderTable = (data, title, period, bgColor) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analytics-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `table-header ${bgColor}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"period\",\n        children: period\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"TOTAL GMV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: formatCurrency(data.totalGmv)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"FLASH SALES PERFORMANCE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: formatCurrency(data.flashSalesPerformance)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"TOP-PERFORMING CREATORS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.topPerformingCreators\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"GMV PER VIDEO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.gmvpervideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"Refund Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.refundrate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"Tiktok Campaign outcome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.Tiktokcompaign\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 411,\n    columnNumber: 5\n  }, this);\n\n  // New custom range table component\n  const renderCustomRangeTable = () => {\n    if (customRangeData.length === 0) return null;\n    const totals = calculateTotals();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-range-table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-range-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Performance Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"date-range-info\",\n          children: [\"From \", dates.startDate, \" to \", dates.endDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"performance-table\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"data-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"parameter-column\",\n                children: \"Parameter/Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 464,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"period-column\",\n                children: period.period\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 466,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"total-column\",\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n              className: \"section-header\",\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: customRangeData.length + 2,\n                children: \"Sales Performance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"GMV (raw)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatCurrency(period.totalGmv)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.totalGmv > 0 ? 'positive' : 'neutral'}`,\n                  children: [period.totalGmv > 0 ? '+' : '', (period.totalGmv / (totals.totalGmv || 1) * 100).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatCurrency(totals.totalGmv)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"Flash Sales Performance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatCurrency(period.flashSalesPerformance)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 495,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.flashSalesPerformance > 0 ? 'positive' : 'neutral'}`,\n                  children: [period.flashSalesPerformance > 0 ? '+' : '', (period.flashSalesPerformance / (totals.flashSalesPerformance || 1) * 100).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatCurrency(totals.flashSalesPerformance)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 501,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"Top Performing Creators\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: period.topPerformingCreators\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-change neutral\",\n                  children: [period.topPerformingCreators > 0 ? '+' : '', period.topPerformingCreators]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 509,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: totals.topPerformingCreators\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"GMV Per Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatCurrency(period.gmvPerVideo)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 521,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.gmvPerVideo > 0 ? 'positive' : 'neutral'}`,\n                  children: [period.gmvPerVideo > 0 ? '+' : '', formatPercentage(period.gmvPerVideo / (totals.gmvPerVideo || 1) * 100)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatCurrency(totals.gmvPerVideo)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 527,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"Refund Rate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatPercentage(period.refundRate)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.refundRate < totals.refundRate ? 'positive' : 'negative'}`,\n                  children: [period.refundRate < totals.refundRate ? '↓' : '↑', Math.abs(period.refundRate - totals.refundRate).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 535,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 533,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatPercentage(totals.refundRate)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label\",\n                children: \"TikTok Campaign Outcome\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 17\n              }, this), customRangeData.map((period, index) => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-cell\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"metric-value\",\n                  children: formatCurrency(period.tiktokCampaign)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 547,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `metric-change ${period.tiktokCampaign > 0 ? 'positive' : 'neutral'}`,\n                  children: [period.tiktokCampaign > 0 ? '+' : '', (period.tiktokCampaign / (totals.tiktokCampaign || 1) * 100).toFixed(1), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 548,\n                  columnNumber: 21\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 19\n              }, this)), /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"total-cell\",\n                children: formatCurrency(totals.tiktokCampaign)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tables-container\",\n      children: [renderTable(yesterdayData, 'Yesterday', `Yesterday (${formatDate(new Date())})`, 'header-blue'), renderTable(currentWeekData, 'Current Week', `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`, 'header-green'), renderTable(monthToDateData, 'Month to date', `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`, 'header-red')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-range-section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-range-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"header-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"card-title\",\n              children: \"\\uD83D\\uDCCA Performance Analysis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"card-subtitle\",\n              children: \"Select a date range to analyze your business metrics\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: [/*#__PURE__*/_jsxDEV(DatePickerCard, {\n            onDatesChange: setDates\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"action-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `analyze-button ${!dates.startDate || !dates.endDate || loading ? 'disabled' : ''}`,\n              onClick: fetchCustomRangeData,\n              disabled: !dates.startDate || !dates.endDate || loading,\n              children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"loading-spinner\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 607,\n                  columnNumber: 21\n                }, this), \"Analyzing...\"]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"button-icon\",\n                  children: \"\\uD83D\\uDD0D\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 612,\n                  columnNumber: 21\n                }, this), \"Analyze Performance\"]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 15\n            }, this), dates.startDate && dates.endDate && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"selected-range-display\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"range-label\",\n                children: \"Selected Range:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 620,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"range-text\",\n                children: [new Date(dates.startDate).toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric'\n                }), \" - \", new Date(dates.endDate).toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric',\n                  year: 'numeric'\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 621,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"range-duration\",\n                children: [\"(\", Math.ceil((new Date(dates.endDate) - new Date(dates.startDate)) / (1000 * 60 * 60 * 24)) + 1, \" days)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 632,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 587,\n      columnNumber: 7\n    }, this), renderCustomRangeTable()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 563,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"RZLRl9iBL996l3srVdwsTbhDGlo=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","axios","DatePickerCard","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","yesterdayData","setYesterdayData","currentWeekData","setCurrentWeekData","monthToDateData","setMonthToDateData","dates","setDates","startDate","endDate","customRangeData","setCustomRangeData","loading","setLoading","generateMonthPeriods","periods","start","Date","end","current","getFullYear","getMonth","monthStart","monthEnd","periodStart","periodEnd","push","label","toLocaleString","month","year","formatDate","fullMonth","setMonth","fetchCustomRangeData","alert","periodData","Promise","all","map","period","_creatorsResponse$dat","performanceResponse","flashSalesResponse","creatorsResponse","gmvPerVideoResponse","refundRateResponse","get","params","start_time","end_time","page_size","page_no","totalGmv","data","gmv","flashSalesPerformance","total_sales","topPerformingCreators","top_creators","length","gmvPerVideo","refundRate","refund_rate","tiktokCampaign","error","console","date","String","padStart","day","getDate","getStartOfWeek","startOfWeek","getDay","diff","setDate","getStartOfMonth","startOfMonth","calculateTotals","reduce","sum","Math","max","fetchData","currentDate","yesterday","formattedYesterday","formattedEndOfWeek","formattedEndOfMonth","yesterdayPerformanceResponse","currentWeekPerformanceResponse","monthToDatePerformanceResponse","yesterdayflashsales","currentWeekflashsales","monthToDateflashsales","dailycreatorsResponse","weaklycreatorsResponse","monthlycreatorsResponse","start_date","end_date","dailygmvPervideo","weeklygmvPervideo","monthlygmvPervideo","dailyRefundrate","weeklyRefundrate","monthlyRefundrate","gmvpervideo","refundrate","Tiktokcompaign","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","formatPercentage","value","toFixed","renderTable","title","bgColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderCustomRangeTable","totals","index","colSpan","abs","onDatesChange","onClick","disabled","toLocaleDateString","ceil","_c","$RefreshReg$"],"sources":["/Users/yousafzahid/Documents/GitHub/TT_app/frontend/src/components/Dashboard.jsx"],"sourcesContent":["// export default Dashboard;\nimport React, { useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport \"./Dashboard.css\";\nimport DatePickerCard from './Datepicker';\n\nconst Dashboard = () => {\n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n  const [dates, setDates] = useState({ startDate: '', endDate: '' });\n  // const [data, setData] = useState(null);\n  const [customRangeData, setCustomRangeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  // const [selectedPeriods, setSelectedPeriods] = useState([]);\n\n  // Function to generate month periods between start and end date\n  const generateMonthPeriods = (startDate, endDate) => {\n    const periods = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    \n    let current = new Date(start.getFullYear(), start.getMonth(), 1);\n    \n    while (current <= end) {\n      const monthStart = new Date(current);\n      const monthEnd = new Date(current.getFullYear(), current.getMonth() + 1, 0);\n      \n      // Adjust for the actual range\n      const periodStart = monthStart < start ? start : monthStart;\n      const periodEnd = monthEnd > end ? end : monthEnd;\n      \n      periods.push({\n        label: current.toLocaleString('default', { month: 'short', year: 'numeric' }),\n        startDate: formatDate(periodStart),\n        endDate: formatDate(periodEnd),\n        fullMonth: monthStart >= start && monthEnd <= end\n      });\n      \n      current.setMonth(current.getMonth() + 1);\n    }\n    \n    return periods;\n  };\n\n  const fetchCustomRangeData = async () => {\n    if (!dates.startDate || !dates.endDate) {\n      alert('Please select both start and end dates');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const periods = generateMonthPeriods(dates.startDate, dates.endDate);\n      \n      \n      const periodData = await Promise.all(\n        periods.map(async (period) => {\n          try {\n            // Fetch all required data for this period\n            const [\n              performanceResponse,\n              flashSalesResponse,\n              creatorsResponse,\n              gmvPerVideoResponse,\n              refundRateResponse\n            ] = await Promise.all([\n              axios.get('/api/shop/performance', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              }),\n              axios.get('/api/flash_sales_performance', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              }),\n              axios.get('/api/top_performing_creators', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              }),\n              axios.get('/api/Gmv_per_video', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              }),\n              axios.get('/api/calculate_refund_rate', {\n                params: {\n                  start_time: period.startDate,\n                  end_time: period.endDate,\n                  page_size: 10,\n                  page_no: 1\n                }\n              })\n            ]);\n\n            return {\n              period: period.label,\n              startDate: period.startDate,\n              endDate: period.endDate,\n              totalGmv: performanceResponse.data.gmv || 0,\n              flashSalesPerformance: flashSalesResponse.data.total_sales || 0,\n              topPerformingCreators: creatorsResponse.data.top_creators?.length || 0,\n              gmvPerVideo: gmvPerVideoResponse.data.gmv || 0,\n              refundRate: refundRateResponse.data.refund_rate || 0,\n              tiktokCampaign: performanceResponse.data.gmv || 0 // Using GMV as campaign outcome\n            };\n          } catch (error) {\n            console.error(`Error fetching data for period ${period.label}:`, error);\n            return {\n              period: period.label,\n              startDate: period.startDate,\n              endDate: period.endDate,\n              totalGmv: 0,\n              flashSalesPerformance: 0,\n              topPerformingCreators: 0,\n              gmvPerVideo: 0,\n              refundRate: 0,\n              tiktokCampaign: 0,\n              error: true\n            };\n          }\n        })\n      );\n\n      setCustomRangeData(periodData);\n    } catch (error) {\n      console.error('Error fetching custom range data:', error);\n      alert('Error fetching data. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // const fetchPerformance = async () => {\n  //   try {\n  //     const response = await axios.get('/api/shop/performance', {\n  //       params: {\n  //         start_time: dates.startDate,\n  //         end_time: dates.endDate,\n  //         page_size: 10,\n  //         page_no: 1,\n  //       },\n  //     });\n  //     setData(response.data);\n  //   } catch (error) {\n  //     console.error('API call error:', error);\n  //   }\n  // };\n\n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = (date) => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = useCallback((date) => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  }, []);\n  \n  const getStartOfMonth = useCallback((date) => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1);\n    return formatDate(startOfMonth);\n  }, []);\n\n  // Calculate percentage change\n  // const calculatePercentageChange = (current, previous) => {\n  //   if (previous === 0) {\n  //     return current > 0 ? '+100.0%' : '0.0%';\n  //   }\n  //   const change = ((current - previous) / previous) * 100;\n  //   const sign = change >= 0 ? '+' : '';\n  //   return `${sign}${change.toFixed(1)}%`;\n  // };\n\n  // Calculate totals for the custom range table\n  const calculateTotals = () => {\n    if (customRangeData.length === 0) return {};\n    \n    return {\n      totalGmv: customRangeData.reduce((sum, period) => sum + period.totalGmv, 0),\n      flashSalesPerformance: customRangeData.reduce((sum, period) => sum + period.flashSalesPerformance, 0),\n      topPerformingCreators: Math.max(...customRangeData.map(period => period.topPerformingCreators), 0),\n      gmvPerVideo: customRangeData.reduce((sum, period) => sum + period.gmvPerVideo, 0) / customRangeData.length,\n      refundRate: customRangeData.reduce((sum, period) => sum + period.refundRate, 0) / customRangeData.length,\n      tiktokCampaign: customRangeData.reduce((sum, period) => sum + period.tiktokCampaign, 0)\n    };\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate));\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate);\n\n        // Fetch performance data for yesterday\n        const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current week\n        const currentWeekPerformanceResponse = await axios.get('/api/shop/performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current month\n        const monthToDatePerformanceResponse = await axios.get('/api/shop/performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        \n        // Fetch flash sales performance \n        const yesterdayflashsales = await axios.get('/api/flash_sales_performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const currentWeekflashsales = await axios.get('/api/flash_sales_performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const monthToDateflashsales = await axios.get('/api/flash_sales_performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch top-performing creators for each period\n        const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const dailygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          totalGmv: yesterdayPerformanceResponse.data.gmv,\n          flashSalesPerformance: yesterdayflashsales.data.total_sales,\n          topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n          gmvpervideo: dailygmvPervideo.data.gmv,\n          refundrate: dailyRefundrate.data.refund_rate,\n          Tiktokcompaign: yesterdayPerformanceResponse.data.gmv\n        });\n\n        setCurrentWeekData({\n          totalGmv: currentWeekPerformanceResponse.data.gmv,\n          flashSalesPerformance: currentWeekflashsales.data.total_sales,\n          topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n          gmvpervideo: weeklygmvPervideo.data.gmv,\n          refundrate: weeklyRefundrate.data.refund_rate,\n          Tiktokcompaign: currentWeekPerformanceResponse.data.gmv\n        });\n\n        setMonthToDateData({\n          totalGmv: monthToDatePerformanceResponse.data.gmv,\n          flashSalesPerformance: monthToDateflashsales.data.total_sales,\n          topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n          gmvpervideo: monthlygmvPervideo.data.gmv,\n          refundrate: monthlyRefundrate.data.refund_rate,\n          Tiktokcompaign: monthToDatePerformanceResponse.data.gmv\n        });\n\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, [getStartOfMonth, getStartOfWeek]);\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount);\n  };\n\n  const formatPercentage = (value) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const renderTable = (data, title, period, bgColor) => (\n    <div className=\"analytics-table\">\n      <div className={`table-header ${bgColor}`}>\n        <h3>{title}</h3>\n        <span className=\"period\">{period}</span>\n      </div>\n      <div className=\"table-content\">\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">TOTAL GMV</span>\n          <span className=\"metric-value\">{formatCurrency(data.totalGmv)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">FLASH SALES PERFORMANCE</span>\n          <span className=\"metric-value\">{formatCurrency(data.flashSalesPerformance)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n          <span className=\"metric-value\">{data.topPerformingCreators}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">GMV PER VIDEO</span>\n          <span className=\"metric-value\">{data.gmvpervideo}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Refund Rate</span>\n          <span className=\"metric-value\">{data.refundrate}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Tiktok Campaign outcome</span>\n          <span className=\"metric-value\">{data.Tiktokcompaign}</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  // New custom range table component\n  const renderCustomRangeTable = () => {\n    if (customRangeData.length === 0) return null;\n\n    const totals = calculateTotals();\n\n    return (\n      <div className=\"custom-range-table-container\">\n        <div className=\"custom-range-header\">\n          <h2>Performance Analysis</h2>\n          <p className=\"date-range-info\">\n            From {dates.startDate} to {dates.endDate}\n          </p>\n        </div>\n        \n        <div className=\"performance-table\">\n          <table className=\"data-table\">\n            <thead>\n              <tr>\n                <th className=\"parameter-column\">Parameter/Date</th>\n                {customRangeData.map((period, index) => (\n                  <th key={index} className=\"period-column\">\n                    {period.period}\n                  </th>\n                ))}\n                <th className=\"total-column\">Total</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr className=\"section-header\">\n                <td colSpan={customRangeData.length + 2}>Sales Performance</td>\n              </tr>\n              \n              <tr>\n                <td className=\"metric-label\">GMV (raw)</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatCurrency(period.totalGmv)}</div>\n                    <div className={`metric-change ${period.totalGmv > 0 ? 'positive' : 'neutral'}`}>\n                      {period.totalGmv > 0 ? '+' : ''}{((period.totalGmv / (totals.totalGmv || 1)) * 100).toFixed(1)}%\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatCurrency(totals.totalGmv)}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">Flash Sales Performance</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatCurrency(period.flashSalesPerformance)}</div>\n                    <div className={`metric-change ${period.flashSalesPerformance > 0 ? 'positive' : 'neutral'}`}>\n                      {period.flashSalesPerformance > 0 ? '+' : ''}{((period.flashSalesPerformance / (totals.flashSalesPerformance || 1)) * 100).toFixed(1)}%\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatCurrency(totals.flashSalesPerformance)}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">Top Performing Creators</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{period.topPerformingCreators}</div>\n                    <div className=\"metric-change neutral\">\n                      {period.topPerformingCreators > 0 ? '+' : ''}{period.topPerformingCreators}\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{totals.topPerformingCreators}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">GMV Per Video</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatCurrency(period.gmvPerVideo)}</div>\n                    <div className={`metric-change ${period.gmvPerVideo > 0 ? 'positive' : 'neutral'}`}>\n                      {period.gmvPerVideo > 0 ? '+' : ''}{formatPercentage((period.gmvPerVideo / (totals.gmvPerVideo || 1)) * 100)}\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatCurrency(totals.gmvPerVideo)}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">Refund Rate</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatPercentage(period.refundRate)}</div>\n                    <div className={`metric-change ${period.refundRate < totals.refundRate ? 'positive' : 'negative'}`}>\n                      {period.refundRate < totals.refundRate ? '↓' : '↑'}{Math.abs(period.refundRate - totals.refundRate).toFixed(1)}%\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatPercentage(totals.refundRate)}</td>\n              </tr>\n\n              <tr>\n                <td className=\"metric-label\">TikTok Campaign Outcome</td>\n                {customRangeData.map((period, index) => (\n                  <td key={index} className=\"metric-cell\">\n                    <div className=\"metric-value\">{formatCurrency(period.tiktokCampaign)}</div>\n                    <div className={`metric-change ${period.tiktokCampaign > 0 ? 'positive' : 'neutral'}`}>\n                      {period.tiktokCampaign > 0 ? '+' : ''}{((period.tiktokCampaign / (totals.tiktokCampaign || 1)) * 100).toFixed(1)}%\n                    </div>\n                  </td>\n                ))}\n                <td className=\"total-cell\">{formatCurrency(totals.tiktokCampaign)}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      {/* Original Dashboard Tables */}\n      <div className=\"tables-container\">\n        {renderTable(\n          yesterdayData,\n          'Yesterday',\n          `Yesterday (${formatDate(new Date())})`,\n          'header-blue'\n        )}\n        {renderTable(\n          currentWeekData,\n          'Current Week',\n          `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n          'header-green'\n        )}\n        {renderTable(\n          monthToDateData,\n          'Month to date',\n          `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n          'header-red'\n        )}\n      </div>\n\n      {/* Date Range Selection Section */}\n      <div className=\"date-range-section\">\n        <div className=\"date-range-card\">\n          <div className=\"card-header\">\n            <div className=\"header-content\">\n              <h2 className=\"card-title\">📊 Performance Analysis</h2>\n              <p className=\"card-subtitle\">Select a date range to analyze your business metrics</p>\n            </div>\n          </div>\n          \n          <div className=\"card-body\">\n            <DatePickerCard onDatesChange={setDates} />\n            \n            <div className=\"action-section\">\n              <button\n                className={`analyze-button ${(!dates.startDate || !dates.endDate || loading) ? 'disabled' : ''}`}\n                onClick={fetchCustomRangeData}\n                disabled={!dates.startDate || !dates.endDate || loading}\n              >\n                {loading ? (\n                  <>\n                    <span className=\"loading-spinner\"></span>\n                    Analyzing...\n                  </>\n                ) : (\n                  <>\n                    <span className=\"button-icon\">🔍</span>\n                    Analyze Performance\n                  </>\n                )}\n              </button>\n              \n              {dates.startDate && dates.endDate && (\n                <div className=\"selected-range-display\">\n                  <span className=\"range-label\">Selected Range:</span>\n                  <span className=\"range-text\">\n                    {new Date(dates.startDate).toLocaleDateString('en-US', { \n                      month: 'short', \n                      day: 'numeric', \n                      year: 'numeric' \n                    })} - {new Date(dates.endDate).toLocaleDateString('en-US', { \n                      month: 'short', \n                      day: 'numeric', \n                      year: 'numeric' \n                    })}\n                  </span>\n                  <span className=\"range-duration\">\n                    ({Math.ceil((new Date(dates.endDate) - new Date(dates.startDate)) / (1000 * 60 * 60 * 24)) + 1} days)\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Custom Range Table */}\n      {renderCustomRangeTable()}\n    </div>\n  );\n};\n\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}