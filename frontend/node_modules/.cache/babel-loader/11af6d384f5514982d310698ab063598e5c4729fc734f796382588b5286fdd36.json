{"ast":null,"code":"// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// const CreatorPerformance = () => {\n//   const [yesterdayData, setYesterdayData] = useState({});\n//   const [currentWeekData, setCurrentWeekData] = useState({});\n//   const [monthToDateData, setMonthToDateData] = useState({});\n//   // const [dates, setDates] = useState({ startDate: '', endDate: '' });\n//   // const [data, setData] = useState(null);\n//   // Helper function to format dates as 'YYYY-MM-DD'\n//   const formatDate = (date) => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n//   };\n//   // Helper function to get the start of the current week (Monday)\n//   const getStartOfWeek = (date) => {\n//     const startOfWeek = new Date(date);\n//     const day = startOfWeek.getDay();\n//     const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n//     startOfWeek.setDate(diff);\n//     return formatDate(startOfWeek);\n//   };\n//   // Helper function to get the start of the current month\n//   const getStartOfMonth = (date) => {\n//     const startOfMonth = new Date(date);\n//     startOfMonth.setDate(1); // Set the date to the 1st of the month\n//     return formatDate(startOfMonth);\n//   };\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const currentDate = new Date();\n//         // Get yesterday's date\n//         const yesterday = new Date(currentDate);\n//         yesterday.setDate(currentDate.getDate() - 1);\n//         const formattedYesterday = formatDate(yesterday);\n//         // Get start and end of current week\n//         const startOfWeek = getStartOfWeek(currentDate);\n//         const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n//         // Get start of the current month\n//         const startOfMonth = getStartOfMonth(currentDate);\n//         const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n//         // Fetch performance data (GMV, flash sales, etc.) for yesterday\n//         const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         // Fetch performance data (GMV, flash sales, etc.) for the current week\n//         // const currentWeekPerformanceResponse = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: startOfWeek,\n//         //     end_time: formattedEndOfWeek,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n//         // // Fetch performance data (GMV, flash sales, etc.) for the current month\n//         // const monthToDatePerformanceResponse = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: startOfMonth,\n//         //     end_time: formattedEndOfMonth,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n//         // //fetch flash sales performance \n//         // const yesterdayflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: formattedYesterday,\n//         //     end_time: formattedYesterday,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n//         // //fetch flash sales performance \n//         // const currentWeekflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: startOfWeek,\n//         //     end_time: formattedEndOfWeek,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n//         // //fetch flash sales performance \n//         // const monthToDateflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: startOfMonth,\n//         //     end_time: formattedEndOfMonth,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n//         // const compain = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: dates.startDate,\n//         //     end_time: dates.endDate,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n//         // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n//         const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         // Update the dashboard state with the fetched data\n//         setYesterdayData({\n//           topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: dailygmvPervideo.data.gmv,\n//           refundrate: dailyRefundrate.data.refundrate,\n//         });\n//         setCurrentWeekData({\n//           topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: weeklygmvPervideo.data.gmv,\n//           refundrate: weeklyRefundrate.data.refundrate,\n//         });\n//         setMonthToDateData({\n//           topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: monthlygmvPervideo.data.gmv,\n//           refundrate: monthlyRefundrate.data.refundrate\n//         });\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n//     fetchData();\n//   }, []);\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD',\n//       minimumFractionDigits: 2\n//     }).format(amount);\n//   };\n//   const calculatePercentage = (value, total) => {\n//     if (total === 0) return '0.0%';\n//     return ((value / total) * 100).toFixed(1) + '%';\n//   };\n//   const renderTable = (data, title, period, bgColor) => (\n//     <div className=\"analytics-table\">\n//       <div className={`table-header ${bgColor}`}>\n//         <h3>{title}</h3>\n//         <span className=\"period\">{period}</span>\n//       </div>\n//       <div className=\"table-content\">\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n//           <span className=\"metric-value\">{data.topPerformingCreators}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">GMV PER VIDEO</span>\n//           <span className=\"metric-value\">{data.gmvpervideo}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Refund Rate</span>\n//           <span className=\"metric-value\">{data.refundrate}</span>\n//         </div>\n//       </div>\n//     </div>\n//   );\n//   return (\n//     <div className=\"dashboard-container\">\n//       <div className=\"tables-container\">\n//         {renderTable(\n//           yesterdayData,\n//           'Yesterday',\n//           `Yesterday (${formatDate(new Date())})`,\n//           'header-blue'\n//         )}\n//         {renderTable(\n//           currentWeekData,\n//           'Current Week',\n//           `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n//           'header-green'\n//         )}\n//         {renderTable(\n//           monthToDateData,\n//           'Month to date',\n//           `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n//           'header-red'\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n// export default CreatorPerformance;\nimport React,{useEffect,useState,useCallback}from'react';import{useParams}from'react-router-dom';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CreatorPerformance=()=>{const{brandId}=useParams();const[yesterdayData,setYesterdayData]=useState({});const[currentWeekData,setCurrentWeekData]=useState({});const[monthToDateData,setMonthToDateData]=useState({});// Helper function to format dates as 'YYYY-MM-DD'\nconst formatDate=date=>{const year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,'0');// Months are 0-indexed\nconst day=String(date.getDate()).padStart(2,'0');return\"\".concat(year,\"-\").concat(month,\"-\").concat(day);};// Helper function to get the start of the current week (Monday)\nconst getStartOfWeek=useCallback(date=>{const startOfWeek=new Date(date);const day=startOfWeek.getDay();const diff=startOfWeek.getDate()-day+(day===0?-6:1);// Adjust if it's Sunday\nstartOfWeek.setDate(diff);return formatDate(startOfWeek);},[]);const getStartOfMonth=useCallback(date=>{const startOfMonth=new Date(date);startOfMonth.setDate(1);// Set the date to the 1st of the month\nreturn formatDate(startOfMonth);},[]);useEffect(()=>{const fetchData=async()=>{try{const currentDate=new Date();// Get yesterday's date\nconst yesterday=new Date(currentDate);yesterday.setDate(currentDate.getDate()-1);const formattedYesterday=formatDate(yesterday);// Get start and end of current week\nconst startOfWeek=getStartOfWeek(currentDate);const formattedEndOfWeek=formatDate(new Date(currentDate));// current day is the end of the week\n// Get start of the current month\nconst startOfMonth=getStartOfMonth(currentDate);const formattedEndOfMonth=formatDate(currentDate);// current day is the end of the month\n// Fetch performance data (GMV, flash sales, etc.) for yesterday\n// const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n//   params: {\n//     start_time: formattedYesterday,\n//     end_time: formattedYesterday,\n//     page_size: 10,\n//     page_no: 1\n//   }\n// });\n// Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\nconst dailycreatorsResponse=await axios.get('/api/top_performing_creators',{params:{start_time:formattedYesterday,end_time:formattedYesterday,page_size:10,page_no:1}});const weaklycreatorsResponse=await axios.get('/api/top_performing_creators',{params:{start_time:startOfWeek,end_time:formattedEndOfWeek,page_size:10,page_no:1}});const monthlycreatorsResponse=await axios.get('/api/top_performing_creators',{params:{start_date:startOfMonth,// Start of current month\nend_date:formattedEndOfMonth,// End of current month (today)\npage_size:10,page_no:1}});const dailygmvPervideo=await axios.get('/api/Gmv_per_video',{params:{start_time:formattedYesterday,end_time:formattedYesterday,page_size:10,page_no:1}});const weeklygmvPervideo=await axios.get('/api/Gmv_per_video',{params:{start_time:startOfWeek,end_time:formattedEndOfWeek,page_size:10,page_no:1}});const monthlygmvPervideo=await axios.get('/api/Gmv_per_video',{params:{start_date:startOfMonth,// Start of current month\nend_date:formattedEndOfMonth,// End of current month (today)\npage_size:10,page_no:1}});const dailyRefundrate=await axios.get('/api/calculate_refund_rate',{params:{start_time:formattedYesterday,end_time:formattedYesterday,page_size:10,page_no:1}});const weeklyRefundrate=await axios.get('/api/calculate_refund_rate',{params:{start_time:startOfWeek,end_time:formattedEndOfWeek,page_size:10,page_no:1}});const monthlyRefundrate=await axios.get('/api/calculate_refund_rate',{params:{start_date:startOfMonth,// Start of current month\nend_date:formattedEndOfMonth,// End of current month (today)\npage_size:10,page_no:1}});// Update the dashboard state with the fetched data\nsetYesterdayData({topPerformingCreators:dailycreatorsResponse.data.top_creators.length,gmvpervideo:dailygmvPervideo.data.gmv,refundrate:dailyRefundrate.data.refund_rate});setCurrentWeekData({topPerformingCreators:weaklycreatorsResponse.data.top_creators.length,gmvpervideo:weeklygmvPervideo.data.gmv,refundrate:weeklyRefundrate.data.refund_rate});setMonthToDateData({topPerformingCreators:monthlycreatorsResponse.data.top_creators.length,gmvpervideo:monthlygmvPervideo.data.gmv,refundrate:monthlyRefundrate.data.refund_rate});}catch(error){console.error(\"Error fetching data:\",error);}};fetchData();},[brandId,getStartOfMonth,getStartOfWeek]);// Fixed: removed undefined 'dates' from dependency array\n// const formatCurrency = (amount) => {\n//   return new Intl.NumberFormat('en-US', {\n//     style: 'currency',\n//     currency: 'USD',\n//     minimumFractionDigits: 2\n//   }).format(amount);\n// };\n// const calculatePercentage = (value, total) => {\n//   if (total === 0) return '0.0%';\n//   return ((value / total) * 100).toFixed(1) + '%';\n// };\nconst renderTable=(data,title,period,bgColor)=>/*#__PURE__*/_jsxs(\"div\",{className:\"analytics-table\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"table-header \".concat(bgColor),children:[/*#__PURE__*/_jsx(\"h3\",{children:title}),/*#__PURE__*/_jsx(\"span\",{className:\"period\",children:period})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"table-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"metric-row\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"metric-label\",children:\"TOP-PERFORMING CREATORS\"}),/*#__PURE__*/_jsx(\"span\",{className:\"metric-value\",children:data.topPerformingCreators})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"metric-row\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"metric-label\",children:\"GMV PER VIDEO\"}),/*#__PURE__*/_jsx(\"span\",{className:\"metric-value\",children:data.gmvpervideo})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"metric-row\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"metric-label\",children:\"Refund Rate\"}),/*#__PURE__*/_jsx(\"span\",{className:\"metric-value\",children:data.refundrate})]})]})]});return/*#__PURE__*/_jsx(\"div\",{className:\"dashboard-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tables-container\",children:[renderTable(yesterdayData,'Yesterday',\"Yesterday (\".concat(formatDate(new Date()),\")\"),'header-blue'),renderTable(currentWeekData,'Current Week',\"Week (\".concat(getStartOfWeek(new Date()),\" - \").concat(formatDate(new Date()),\")\"),'header-green'),renderTable(monthToDateData,'Month to date',\"Month (\".concat(getStartOfMonth(new Date()),\" - \").concat(formatDate(new Date()),\")\"),'header-red')]})});};export default CreatorPerformance;","map":{"version":3,"names":["React","useEffect","useState","useCallback","useParams","axios","jsx","_jsx","jsxs","_jsxs","CreatorPerformance","brandId","yesterdayData","setYesterdayData","currentWeekData","setCurrentWeekData","monthToDateData","setMonthToDateData","formatDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","getStartOfWeek","startOfWeek","Date","getDay","diff","setDate","getStartOfMonth","startOfMonth","fetchData","currentDate","yesterday","formattedYesterday","formattedEndOfWeek","formattedEndOfMonth","dailycreatorsResponse","get","params","start_time","end_time","page_size","page_no","weaklycreatorsResponse","monthlycreatorsResponse","start_date","end_date","dailygmvPervideo","weeklygmvPervideo","monthlygmvPervideo","dailyRefundrate","weeklyRefundrate","monthlyRefundrate","topPerformingCreators","data","top_creators","length","gmvpervideo","gmv","refundrate","refund_rate","error","console","renderTable","title","period","bgColor","className","children"],"sources":["/Users/yousafzahid/Documents/GitHub/TT_app/frontend/src/components/CreatorPerformance.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n\n// const CreatorPerformance = () => {\n//   const [yesterdayData, setYesterdayData] = useState({});\n//   const [currentWeekData, setCurrentWeekData] = useState({});\n//   const [monthToDateData, setMonthToDateData] = useState({});\n//   // const [dates, setDates] = useState({ startDate: '', endDate: '' });\n//   // const [data, setData] = useState(null);\n\n \n//   // Helper function to format dates as 'YYYY-MM-DD'\n//   const formatDate = (date) => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n//   };\n\n//   // Helper function to get the start of the current week (Monday)\n//   const getStartOfWeek = (date) => {\n//     const startOfWeek = new Date(date);\n//     const day = startOfWeek.getDay();\n//     const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n//     startOfWeek.setDate(diff);\n//     return formatDate(startOfWeek);\n//   };\n\n//   // Helper function to get the start of the current month\n//   const getStartOfMonth = (date) => {\n//     const startOfMonth = new Date(date);\n//     startOfMonth.setDate(1); // Set the date to the 1st of the month\n//     return formatDate(startOfMonth);\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const currentDate = new Date();\n\n//         // Get yesterday's date\n//         const yesterday = new Date(currentDate);\n//         yesterday.setDate(currentDate.getDate() - 1);\n//         const formattedYesterday = formatDate(yesterday);\n\n//         // Get start and end of current week\n//         const startOfWeek = getStartOfWeek(currentDate);\n//         const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n//         // Get start of the current month\n//         const startOfMonth = getStartOfMonth(currentDate);\n//         const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n//         // Fetch performance data (GMV, flash sales, etc.) for yesterday\n//         const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current week\n//         // const currentWeekPerformanceResponse = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: startOfWeek,\n//         //     end_time: formattedEndOfWeek,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // // Fetch performance data (GMV, flash sales, etc.) for the current month\n//         // const monthToDatePerformanceResponse = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: startOfMonth,\n//         //     end_time: formattedEndOfMonth,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n        \n//         // //fetch flash sales performance \n//         // const yesterdayflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: formattedYesterday,\n//         //     end_time: formattedYesterday,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // //fetch flash sales performance \n//         // const currentWeekflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: startOfWeek,\n//         //     end_time: formattedEndOfWeek,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // //fetch flash sales performance \n//         // const monthToDateflashsales = await axios.get('/api/flash_sales_performance', {\n//         //   params: {\n//         //     start_time: startOfMonth,\n//         //     end_time: formattedEndOfMonth,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n//         // const compain = await axios.get('/api/shop/performance', {\n//         //   params: {\n//         //     start_time: dates.startDate,\n//         //     end_time: dates.endDate,\n//         //     page_size: 10,\n//         //     page_no: 1\n//         //   }\n//         // });\n\n\n//         // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n//         const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const dailygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlygmvPervideo = await axios.get('/api//Gmv_per_video', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlyRefundrate = await axios.get('/api//calculate_refund_rate', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Update the dashboard state with the fetched data\n//         setYesterdayData({\n//           topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: dailygmvPervideo.data.gmv,\n//           refundrate: dailyRefundrate.data.refundrate,\n//         });\n\n//         setCurrentWeekData({\n//           topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: weeklygmvPervideo.data.gmv,\n//           refundrate: weeklyRefundrate.data.refundrate,\n//         });\n\n//         setMonthToDateData({\n//           topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: monthlygmvPervideo.data.gmv,\n//           refundrate: monthlyRefundrate.data.refundrate\n//         });\n\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD',\n//       minimumFractionDigits: 2\n//     }).format(amount);\n//   };\n\n//   const calculatePercentage = (value, total) => {\n//     if (total === 0) return '0.0%';\n//     return ((value / total) * 100).toFixed(1) + '%';\n//   };\n\n//   const renderTable = (data, title, period, bgColor) => (\n//     <div className=\"analytics-table\">\n//       <div className={`table-header ${bgColor}`}>\n//         <h3>{title}</h3>\n//         <span className=\"period\">{period}</span>\n//       </div>\n//       <div className=\"table-content\">\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n//           <span className=\"metric-value\">{data.topPerformingCreators}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">GMV PER VIDEO</span>\n//           <span className=\"metric-value\">{data.gmvpervideo}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Refund Rate</span>\n//           <span className=\"metric-value\">{data.refundrate}</span>\n//         </div>\n//       </div>\n//     </div>\n\n\n//   );\n\n//   return (\n//     <div className=\"dashboard-container\">\n      \n\n//       <div className=\"tables-container\">\n//         {renderTable(\n//           yesterdayData,\n//           'Yesterday',\n//           `Yesterday (${formatDate(new Date())})`,\n//           'header-blue'\n//         )}\n//         {renderTable(\n//           currentWeekData,\n//           'Current Week',\n//           `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n//           'header-green'\n//         )}\n//         {renderTable(\n//           monthToDateData,\n//           'Month to date',\n//           `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n//           'header-red'\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default CreatorPerformance;\n\n\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\n\nconst CreatorPerformance = () => {\n  const { brandId } = useParams(); \n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n\n \n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = (date) => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = useCallback((date) => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  }, []);\n  \n  const getStartOfMonth = useCallback((date) => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1); // Set the date to the 1st of the month\n    return formatDate(startOfMonth);\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n        // Fetch performance data (GMV, flash sales, etc.) for yesterday\n        // const yesterdayPerformanceResponse = await axios.get('/api/shop/performance', {\n        //   params: {\n        //     start_time: formattedYesterday,\n        //     end_time: formattedYesterday,\n        //     page_size: 10,\n        //     page_no: 1\n        //   }\n        // });\n\n        // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n        const dailycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('/api/top_performing_creators', {\n          params: {\n            start_date: startOfMonth, // Start of current month\n            end_date: formattedEndOfMonth, // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const dailygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('/api/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth, // Start of current month\n            end_date: formattedEndOfMonth, // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('/api/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth, // Start of current month\n            end_date: formattedEndOfMonth, // End of current month (today)\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n          gmvpervideo: dailygmvPervideo.data.gmv,\n          refundrate: dailyRefundrate.data.refund_rate,\n        });\n\n        setCurrentWeekData({\n          topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n          gmvpervideo: weeklygmvPervideo.data.gmv,\n          refundrate: weeklyRefundrate.data.refund_rate,\n        });\n\n        setMonthToDateData({\n          topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n          gmvpervideo: monthlygmvPervideo.data.gmv,\n          refundrate: monthlyRefundrate.data.refund_rate\n        });\n\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, [brandId, getStartOfMonth, getStartOfWeek]); // Fixed: removed undefined 'dates' from dependency array\n\n  // const formatCurrency = (amount) => {\n  //   return new Intl.NumberFormat('en-US', {\n  //     style: 'currency',\n  //     currency: 'USD',\n  //     minimumFractionDigits: 2\n  //   }).format(amount);\n  // };\n\n  // const calculatePercentage = (value, total) => {\n  //   if (total === 0) return '0.0%';\n  //   return ((value / total) * 100).toFixed(1) + '%';\n  // };\n\n  const renderTable = (data, title, period, bgColor) => (\n    <div className=\"analytics-table\">\n      <div className={`table-header ${bgColor}`}>\n        <h3>{title}</h3>\n        <span className=\"period\">{period}</span>\n      </div>\n      <div className=\"table-content\">\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n          <span className=\"metric-value\">{data.topPerformingCreators}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">GMV PER VIDEO</span>\n          <span className=\"metric-value\">{data.gmvpervideo}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Refund Rate</span>\n          <span className=\"metric-value\">{data.refundrate}</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"dashboard-container\">\n      <div className=\"tables-container\">\n        {renderTable(\n          yesterdayData,\n          'Yesterday',\n          `Yesterday (${formatDate(new Date())})`,\n          'header-blue'\n        )}\n        {renderTable(\n          currentWeekData,\n          'Current Week',\n          `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n          'header-green'\n        )}\n        {renderTable(\n          monthToDateData,\n          'Month to date',\n          `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n          'header-red'\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CreatorPerformance;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}