{"ast":null,"code":"var _jsxFileName = \"/Users/yousafzahid/Documents/TT_shop_Dashboard/frontend/src/components/Dashboard.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import \"./Dashboard.css\";\n// import DatePickerCard from './Datepicker';\n\n// const Dashboard = () => {\n//   const [yesterdayData, setYesterdayData] = useState({});\n//   const [currentWeekData, setCurrentWeekData] = useState({});\n//   const [monthToDateData, setMonthToDateData] = useState({});\n//   const [dates, setDates] = useState({ startDate: '', endDate: '' });\n//   const [data, setData] = useState(null);\n\n//   const fetchPerformance = async () => {\n//     try {\n//       const response = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//         params: {\n//           start_time: dates.startDate, // use selected start date\n//           end_time: dates.endDate,     // use selected end date\n//           page_size: 10,\n//           page_no: 1,\n//         },\n//       });\n//       setData(response.data);\n//     } catch (error) {\n//       console.error('API call error:', error);\n//     }\n//   };\n\n//   // Helper function to format dates as 'YYYY-MM-DD'\n//   const formatDate = (date) => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n//   };\n\n//   // Helper function to get the start of the current week (Monday)\n//   const getStartOfWeek = (date) => {\n//     const startOfWeek = new Date(date);\n//     const day = startOfWeek.getDay();\n//     const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n//     startOfWeek.setDate(diff);\n//     return formatDate(startOfWeek);\n//   };\n\n//   // Helper function to get the start of the current month\n//   const getStartOfMonth = (date) => {\n//     const startOfMonth = new Date(date);\n//     startOfMonth.setDate(1); // Set the date to the 1st of the month\n//     return formatDate(startOfMonth);\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const currentDate = new Date();\n\n//         // Get yesterday's date\n//         const yesterday = new Date(currentDate);\n//         yesterday.setDate(currentDate.getDate() - 1);\n//         const formattedYesterday = formatDate(yesterday);\n\n//         // Get start and end of current week\n//         const startOfWeek = getStartOfWeek(currentDate);\n//         const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n//         // Get start of the current month\n//         const startOfMonth = getStartOfMonth(currentDate);\n//         const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n//         // Fetch performance data (GMV, flash sales, etc.) for yesterday\n//         const yesterdayPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current week\n//         const currentWeekPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current month\n//         const monthToDatePerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: startOfMonth,\n//             end_time: formattedEndOfMonth,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const yesterdayflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const currentWeekflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const monthToDateflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: startOfMonth,\n//             end_time: formattedEndOfMonth,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const compain = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: dates.startDate,\n//             end_time: dates.endDate,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n//         const dailycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weaklycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const dailygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Update the dashboard state with the fetched data\n//         setYesterdayData({\n//           totalGmv: yesterdayPerformanceResponse.data.gmv,\n//           flashSalesPerformance: yesterdayflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: dailygmvPervideo.data.gmv,\n//           refundrate: dailyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//         setCurrentWeekData({\n//           totalGmv: currentWeekPerformanceResponse.data.gmv,\n//           flashSalesPerformance: currentWeekflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: weeklygmvPervideo.data.gmv,\n//           refundrate: weeklyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//         setMonthToDateData({\n//           totalGmv: monthToDatePerformanceResponse.data.gmv,\n//           flashSalesPerformance: monthToDateflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: monthlygmvPervideo.data.gmv,\n//           refundrate: monthlyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD',\n//       minimumFractionDigits: 2\n//     }).format(amount);\n//   };\n\n//   const calculatePercentage = (value, total) => {\n//     if (total === 0) return '0.0%';\n//     return ((value / total) * 100).toFixed(1) + '%';\n//   };\n\n//   const renderTable = (data, title, period, bgColor) => (\n//     <div className=\"analytics-table\">\n//       <div className={`table-header ${bgColor}`}>\n//         <h3>{title}</h3>\n//         <span className=\"period\">{period}</span>\n//       </div>\n//       <div className=\"table-content\">\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOTAL GMV</span>\n//           <span className=\"metric-value\">{formatCurrency(data.totalGmv)}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">FLASH SALES PERFORMANCE</span>\n//           <span className=\"metric-value\">{formatCurrency(data.flashSalesPerformance)}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n//           <span className=\"metric-value\">{data.topPerformingCreators}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">GMV PER VIDEO</span>\n//           <span className=\"metric-value\">{data.gmvpervideo}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Refund Rate </span>\n//           <span className=\"metric-value\">{data.refundrate}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Tiktok Compaign outcome </span>\n//           <span className=\"metric-value\">{data.Tiktokcompaign}</span>\n//           {/* <DatePickerCard onDatesChange={setDates} />\n//           <button\n//             className=\"mt-4 bg-blue-500 text-white rounded-lg px-4 py-2\"\n//             onClick={fetchPerformance}\n//             disabled={!dates.startDate || !dates.endDate}\n//           >\n//             Get Performance\n//           </button> */}\n//         </div>\n//       </div>\n//     </div>\n\n//   );\n\n//   return (\n//     <div className=\"dashboard-container\">   \n//       <div className=\"tables-container\">\n//         {renderTable(\n//           yesterdayData,\n//           'Yesterday',\n//           `Yesterday (${formatDate(new Date())})`,\n//           'header-blue'\n//         )}\n//         {renderTable(\n//           currentWeekData,\n//           'Current Week',\n//           `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n//           'header-green'\n//         )}\n//         {renderTable(\n//           monthToDateData,\n//           'Month to date',\n//           `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n//           'header-red'\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport \"./Dashboard.css\";\nimport DatePickerCard from './Datepicker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n  const [dates, setDates] = useState({\n    startDate: '',\n    endDate: ''\n  });\n  const [data, setData] = useState(null);\n  const [customRangeData, setCustomRangeData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const fetchPerformance = async () => {\n    if (!dates.startDate || !dates.endDate) {\n      alert('Please select both start and end dates');\n      return;\n    }\n    setIsLoading(true);\n    try {\n      const response = await axios.get('http://127.0.0.1:8000/shop/performance', {\n        params: {\n          start_time: dates.startDate,\n          end_time: dates.endDate,\n          page_size: 10,\n          page_no: 1\n        }\n      });\n      setData(response.data);\n\n      // Fetch data for the custom date range table\n      await fetchCustomRangeData();\n    } catch (error) {\n      console.error('API call error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const fetchCustomRangeData = async () => {\n    if (!dates.startDate || !dates.endDate) return;\n    try {\n      const dateRange = generateDateRange(dates.startDate, dates.endDate);\n      const customData = [];\n      for (const date of dateRange) {\n        var _creatorsResponse$dat;\n        const formattedDate = formatDate(new Date(date));\n\n        // Fetch all required data for each date\n        const [performanceResponse, flashSalesResponse, creatorsResponse, gmvPerVideoResponse, refundRateResponse] = await Promise.all([axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: formattedDate,\n            end_time: formattedDate,\n            page_size: 10,\n            page_no: 1\n          }\n        }), axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: formattedDate,\n            end_time: formattedDate,\n            page_size: 10,\n            page_no: 1\n          }\n        }), axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: formattedDate,\n            end_time: formattedDate,\n            page_size: 10,\n            page_no: 1\n          }\n        }), axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: formattedDate,\n            end_time: formattedDate,\n            page_size: 10,\n            page_no: 1\n          }\n        }), axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: formattedDate,\n            end_time: formattedDate,\n            page_size: 10,\n            page_no: 1\n          }\n        })]);\n        customData.push({\n          date: formattedDate,\n          totalGmv: performanceResponse.data.gmv || 0,\n          flashSalesPerformance: flashSalesResponse.data.total_sales || 0,\n          topPerformingCreators: ((_creatorsResponse$dat = creatorsResponse.data.top_creators) === null || _creatorsResponse$dat === void 0 ? void 0 : _creatorsResponse$dat.length) || 0,\n          gmvPerVideo: gmvPerVideoResponse.data.gmv || 0,\n          refundRate: refundRateResponse.data.refund_rate || 0,\n          tiktokCampaign: performanceResponse.data.gmv || 0 // Using same GMV data for TikTok campaign\n        });\n      }\n      setCustomRangeData(customData);\n    } catch (error) {\n      console.error('Error fetching custom range data:', error);\n    }\n  };\n  const generateDateRange = (startDate, endDate) => {\n    const dates = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\n      dates.push(new Date(d));\n    }\n    return dates;\n  };\n\n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = date => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = date => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  };\n\n  // Helper function to get the start of the current month\n  const getStartOfMonth = date => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1);\n    return formatDate(startOfMonth);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        var _dailycreatorsRespons, _weaklycreatorsRespon, _monthlycreatorsRespo;\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate));\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate);\n\n        // Fetch performance data for yesterday\n        const yesterdayPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current week\n        const currentWeekPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current month\n        const monthToDatePerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch flash sales performance \n        const yesterdayflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const currentWeekflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthToDateflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch top-performing creators for each period\n        const dailycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          totalGmv: yesterdayPerformanceResponse.data.gmv || 0,\n          flashSalesPerformance: yesterdayflashsales.data.total_sales || 0,\n          topPerformingCreators: ((_dailycreatorsRespons = dailycreatorsResponse.data.top_creators) === null || _dailycreatorsRespons === void 0 ? void 0 : _dailycreatorsRespons.length) || 0,\n          gmvpervideo: dailygmvPervideo.data.gmv || 0,\n          refundrate: dailyRefundrate.data.refund_rate || 0,\n          Tiktokcompaign: yesterdayPerformanceResponse.data.gmv || 0\n        });\n        setCurrentWeekData({\n          totalGmv: currentWeekPerformanceResponse.data.gmv || 0,\n          flashSalesPerformance: currentWeekflashsales.data.total_sales || 0,\n          topPerformingCreators: ((_weaklycreatorsRespon = weaklycreatorsResponse.data.top_creators) === null || _weaklycreatorsRespon === void 0 ? void 0 : _weaklycreatorsRespon.length) || 0,\n          gmvpervideo: weeklygmvPervideo.data.gmv || 0,\n          refundrate: weeklyRefundrate.data.refund_rate || 0,\n          Tiktokcompaign: currentWeekPerformanceResponse.data.gmv || 0\n        });\n        setMonthToDateData({\n          totalGmv: monthToDatePerformanceResponse.data.gmv || 0,\n          flashSalesPerformance: monthToDateflashsales.data.total_sales || 0,\n          topPerformingCreators: ((_monthlycreatorsRespo = monthlycreatorsResponse.data.top_creators) === null || _monthlycreatorsRespo === void 0 ? void 0 : _monthlycreatorsRespo.length) || 0,\n          gmvpervideo: monthlygmvPervideo.data.gmv || 0,\n          refundrate: monthlyRefundrate.data.refund_rate || 0,\n          Tiktokcompaign: monthToDatePerformanceResponse.data.gmv || 0\n        });\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n  const formatCurrency = amount => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount || 0);\n  };\n  const calculatePercentage = (value, total) => {\n    if (total === 0) return '0.0%';\n    return (value / total * 100).toFixed(1) + '%';\n  };\n  const renderTable = (data, title, period, bgColor) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"analytics-table\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `table-header ${bgColor}`,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"period\",\n        children: period\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"TOTAL GMV\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: formatCurrency(data.totalGmv)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 677,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"FLASH SALES PERFORMANCE\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: formatCurrency(data.flashSalesPerformance)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 681,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"TOP-PERFORMING CREATORS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.topPerformingCreators\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"GMV PER VIDEO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: data.gmvpervideo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"Refund Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 692,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: [data.refundrate, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"metric-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-label\",\n          children: \"Tiktok Campaign outcome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"metric-value\",\n          children: formatCurrency(data.Tiktokcompaign)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 669,\n    columnNumber: 5\n  }, this);\n  const renderCustomRangeTable = () => {\n    if (customRangeData.length === 0) return null;\n    const metrics = [{\n      key: 'totalGmv',\n      label: 'TOTAL GMV',\n      format: 'currency'\n    }, {\n      key: 'flashSalesPerformance',\n      label: 'FLASH SALES PERFORMANCE',\n      format: 'currency'\n    }, {\n      key: 'topPerformingCreators',\n      label: 'TOP-PERFORMING CREATORS',\n      format: 'number'\n    }, {\n      key: 'gmvPerVideo',\n      label: 'GMV PER VIDEO',\n      format: 'number'\n    }, {\n      key: 'refundRate',\n      label: 'REFUND RATE',\n      format: 'percentage'\n    }, {\n      key: 'tiktokCampaign',\n      label: 'TIKTOK CAMPAIGN OUTCOME',\n      format: 'currency'\n    }];\n    const formatValue = (value, format) => {\n      switch (format) {\n        case 'currency':\n          return formatCurrency(value);\n        case 'percentage':\n          return `${value || 0}%`;\n        case 'number':\n        default:\n          return value || 0;\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-range-table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-header header-purple\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Custom Date Range Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"period\",\n          children: [dates.startDate, \" to \", dates.endDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-table-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"custom-range-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"metric-header\",\n                children: \"Metrics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 739,\n                columnNumber: 17\n              }, this), customRangeData.map(dayData => /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"date-header\",\n                children: new Date(dayData.date).toLocaleDateString('en-US', {\n                  month: 'short',\n                  day: 'numeric'\n                })\n              }, dayData.date, false, {\n                fileName: _jsxFileName,\n                lineNumber: 741,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 737,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: metrics.map(metric => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-label-cell\",\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: metric.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 754,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 753,\n                columnNumber: 19\n              }, this), customRangeData.map(dayData => /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"metric-value-cell\",\n                children: formatValue(dayData[metric.key], metric.format)\n              }, `${metric.key}-${dayData.date}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 757,\n                columnNumber: 21\n              }, this))]\n            }, metric.key, true, {\n              fileName: _jsxFileName,\n              lineNumber: 752,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 736,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tables-container\",\n      children: [renderTable(yesterdayData, 'Yesterday', `Yesterday (${formatDate(new Date(Date.now() - 24 * 60 * 60 * 1000))})`, 'header-blue'), renderTable(currentWeekData, 'Current Week', `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`, 'header-green'), renderTable(monthToDateData, 'Month to date', `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`, 'header-red')]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 772,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-analysis-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-picker-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Custom Date Range Analysis\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DatePickerCard, {\n          onDatesChange: setDates\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 797,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fetch-button\",\n          onClick: fetchPerformance,\n          disabled: !dates.startDate || !dates.endDate || isLoading,\n          children: isLoading ? 'Loading...' : 'Analyze Date Range'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 798,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 9\n      }, this), renderCustomRangeTable()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 794,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 771,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"0QG9Dtr2Cywt/x0JVsb6SLL6Vag=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","DatePickerCard","jsxDEV","_jsxDEV","Dashboard","_s","yesterdayData","setYesterdayData","currentWeekData","setCurrentWeekData","monthToDateData","setMonthToDateData","dates","setDates","startDate","endDate","data","setData","customRangeData","setCustomRangeData","isLoading","setIsLoading","fetchPerformance","alert","response","get","params","start_time","end_time","page_size","page_no","fetchCustomRangeData","error","console","dateRange","generateDateRange","customData","date","_creatorsResponse$dat","formattedDate","formatDate","Date","performanceResponse","flashSalesResponse","creatorsResponse","gmvPerVideoResponse","refundRateResponse","Promise","all","push","totalGmv","gmv","flashSalesPerformance","total_sales","topPerformingCreators","top_creators","length","gmvPerVideo","refundRate","refund_rate","tiktokCampaign","start","end","d","setDate","getDate","year","getFullYear","month","String","getMonth","padStart","day","getStartOfWeek","startOfWeek","getDay","diff","getStartOfMonth","startOfMonth","fetchData","_dailycreatorsRespons","_weaklycreatorsRespon","_monthlycreatorsRespo","currentDate","yesterday","formattedYesterday","formattedEndOfWeek","formattedEndOfMonth","yesterdayPerformanceResponse","currentWeekPerformanceResponse","monthToDatePerformanceResponse","yesterdayflashsales","currentWeekflashsales","monthToDateflashsales","dailycreatorsResponse","weaklycreatorsResponse","monthlycreatorsResponse","start_date","end_date","dailygmvPervideo","weeklygmvPervideo","monthlygmvPervideo","dailyRefundrate","weeklyRefundrate","monthlyRefundrate","gmvpervideo","refundrate","Tiktokcompaign","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","format","calculatePercentage","value","total","toFixed","renderTable","title","period","bgColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderCustomRangeTable","metrics","key","label","formatValue","map","dayData","toLocaleDateString","metric","now","onDatesChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/yousafzahid/Documents/TT_shop_Dashboard/frontend/src/components/Dashboard.jsx"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import \"./Dashboard.css\";\n// import DatePickerCard from './Datepicker';\n\n// const Dashboard = () => {\n//   const [yesterdayData, setYesterdayData] = useState({});\n//   const [currentWeekData, setCurrentWeekData] = useState({});\n//   const [monthToDateData, setMonthToDateData] = useState({});\n//   const [dates, setDates] = useState({ startDate: '', endDate: '' });\n//   const [data, setData] = useState(null);\n\n//   const fetchPerformance = async () => {\n//     try {\n//       const response = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//         params: {\n//           start_time: dates.startDate, // use selected start date\n//           end_time: dates.endDate,     // use selected end date\n//           page_size: 10,\n//           page_no: 1,\n//         },\n//       });\n//       setData(response.data);\n//     } catch (error) {\n//       console.error('API call error:', error);\n//     }\n//   };\n\n//   // Helper function to format dates as 'YYYY-MM-DD'\n//   const formatDate = (date) => {\n//     const year = date.getFullYear();\n//     const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed\n//     const day = String(date.getDate()).padStart(2, '0');\n//     return `${year}-${month}-${day}`;\n//   };\n\n//   // Helper function to get the start of the current week (Monday)\n//   const getStartOfWeek = (date) => {\n//     const startOfWeek = new Date(date);\n//     const day = startOfWeek.getDay();\n//     const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1); // Adjust if it's Sunday\n//     startOfWeek.setDate(diff);\n//     return formatDate(startOfWeek);\n//   };\n\n//   // Helper function to get the start of the current month\n//   const getStartOfMonth = (date) => {\n//     const startOfMonth = new Date(date);\n//     startOfMonth.setDate(1); // Set the date to the 1st of the month\n//     return formatDate(startOfMonth);\n//   };\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const currentDate = new Date();\n\n//         // Get yesterday's date\n//         const yesterday = new Date(currentDate);\n//         yesterday.setDate(currentDate.getDate() - 1);\n//         const formattedYesterday = formatDate(yesterday);\n\n//         // Get start and end of current week\n//         const startOfWeek = getStartOfWeek(currentDate);\n//         const formattedEndOfWeek = formatDate(new Date(currentDate)); // current day is the end of the week\n\n//         // Get start of the current month\n//         const startOfMonth = getStartOfMonth(currentDate);\n//         const formattedEndOfMonth = formatDate(currentDate); // current day is the end of the month\n\n//         // Fetch performance data (GMV, flash sales, etc.) for yesterday\n//         const yesterdayPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current week\n//         const currentWeekPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Fetch performance data (GMV, flash sales, etc.) for the current month\n//         const monthToDatePerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: startOfMonth,\n//             end_time: formattedEndOfMonth,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n        \n//         //fetch flash sales performance \n//         const yesterdayflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const currentWeekflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         //fetch flash sales performance \n//         const monthToDateflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n//           params: {\n//             start_time: startOfMonth,\n//             end_time: formattedEndOfMonth,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const compain = await axios.get('http://127.0.0.1:8000/shop/performance', {\n//           params: {\n//             start_time: dates.startDate,\n//             end_time: dates.endDate,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n\n//         // Fetch top-performing creators for each period (Yesterday, Current Week, and Month to Date)\n//         const dailycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weaklycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         const dailygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlygmvPervideo = await axios.get('http://127.0.0.1:8000//Gmv_per_video', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const dailyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_time: formattedYesterday,\n//             end_time: formattedYesterday,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const weeklyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_time: startOfWeek,\n//             end_time: formattedEndOfWeek,\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n//         const monthlyRefundrate = await axios.get('http://127.0.0.1:8000//calculate_refund_rate', {\n//           params: {\n//             start_date: startOfMonth, // Start of current month\n//             end_date: formattedEndOfMonth, // End of current month (today)\n//             page_size: 10,\n//             page_no: 1\n//           }\n//         });\n\n//         // Update the dashboard state with the fetched data\n//         setYesterdayData({\n//           totalGmv: yesterdayPerformanceResponse.data.gmv,\n//           flashSalesPerformance: yesterdayflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: dailycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: dailygmvPervideo.data.gmv,\n//           refundrate: dailyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//         setCurrentWeekData({\n//           totalGmv: currentWeekPerformanceResponse.data.gmv,\n//           flashSalesPerformance: currentWeekflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: weaklycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: weeklygmvPervideo.data.gmv,\n//           refundrate: weeklyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//         setMonthToDateData({\n//           totalGmv: monthToDatePerformanceResponse.data.gmv,\n//           flashSalesPerformance: monthToDateflashsales.data.total_sales,// Example value for flash sales\n//           topPerformingCreators: monthlycreatorsResponse.data.top_creators.length,\n//           gmvpervideo: monthlygmvPervideo.data.gmv,\n//           refundrate: monthlyRefundrate.data.refund_rate,\n//           Tiktokcompaign: compain.data.gmv\n//         });\n\n//       } catch (error) {\n//         console.error(\"Error fetching data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const formatCurrency = (amount) => {\n//     return new Intl.NumberFormat('en-US', {\n//       style: 'currency',\n//       currency: 'USD',\n//       minimumFractionDigits: 2\n//     }).format(amount);\n//   };\n\n//   const calculatePercentage = (value, total) => {\n//     if (total === 0) return '0.0%';\n//     return ((value / total) * 100).toFixed(1) + '%';\n//   };\n\n//   const renderTable = (data, title, period, bgColor) => (\n//     <div className=\"analytics-table\">\n//       <div className={`table-header ${bgColor}`}>\n//         <h3>{title}</h3>\n//         <span className=\"period\">{period}</span>\n//       </div>\n//       <div className=\"table-content\">\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOTAL GMV</span>\n//           <span className=\"metric-value\">{formatCurrency(data.totalGmv)}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">FLASH SALES PERFORMANCE</span>\n//           <span className=\"metric-value\">{formatCurrency(data.flashSalesPerformance)}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n//           <span className=\"metric-value\">{data.topPerformingCreators}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">GMV PER VIDEO</span>\n//           <span className=\"metric-value\">{data.gmvpervideo}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Refund Rate </span>\n//           <span className=\"metric-value\">{data.refundrate}</span>\n//         </div>\n//         <div className=\"metric-row\">\n//           <span className=\"metric-label\">Tiktok Compaign outcome </span>\n//           <span className=\"metric-value\">{data.Tiktokcompaign}</span>\n//           {/* <DatePickerCard onDatesChange={setDates} />\n//           <button\n//             className=\"mt-4 bg-blue-500 text-white rounded-lg px-4 py-2\"\n//             onClick={fetchPerformance}\n//             disabled={!dates.startDate || !dates.endDate}\n//           >\n//             Get Performance\n//           </button> */}\n//         </div>\n//       </div>\n//     </div>\n\n\n//   );\n\n//   return (\n//     <div className=\"dashboard-container\">   \n//       <div className=\"tables-container\">\n//         {renderTable(\n//           yesterdayData,\n//           'Yesterday',\n//           `Yesterday (${formatDate(new Date())})`,\n//           'header-blue'\n//         )}\n//         {renderTable(\n//           currentWeekData,\n//           'Current Week',\n//           `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n//           'header-green'\n//         )}\n//         {renderTable(\n//           monthToDateData,\n//           'Month to date',\n//           `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n//           'header-red'\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;\n\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport \"./Dashboard.css\";\nimport DatePickerCard from './Datepicker';\n\nconst Dashboard = () => {\n  const [yesterdayData, setYesterdayData] = useState({});\n  const [currentWeekData, setCurrentWeekData] = useState({});\n  const [monthToDateData, setMonthToDateData] = useState({});\n  const [dates, setDates] = useState({ startDate: '', endDate: '' });\n  const [data, setData] = useState(null);\n  const [customRangeData, setCustomRangeData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchPerformance = async () => {\n    if (!dates.startDate || !dates.endDate) {\n      alert('Please select both start and end dates');\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const response = await axios.get('http://127.0.0.1:8000/shop/performance', {\n        params: {\n          start_time: dates.startDate,\n          end_time: dates.endDate,\n          page_size: 10,\n          page_no: 1,\n        },\n      });\n      setData(response.data);\n      \n      // Fetch data for the custom date range table\n      await fetchCustomRangeData();\n    } catch (error) {\n      console.error('API call error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchCustomRangeData = async () => {\n    if (!dates.startDate || !dates.endDate) return;\n\n    try {\n      const dateRange = generateDateRange(dates.startDate, dates.endDate);\n      const customData = [];\n\n      for (const date of dateRange) {\n        const formattedDate = formatDate(new Date(date));\n        \n        // Fetch all required data for each date\n        const [\n          performanceResponse,\n          flashSalesResponse,\n          creatorsResponse,\n          gmvPerVideoResponse,\n          refundRateResponse\n        ] = await Promise.all([\n          axios.get('http://127.0.0.1:8000/shop/performance', {\n            params: { start_time: formattedDate, end_time: formattedDate, page_size: 10, page_no: 1 }\n          }),\n          axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n            params: { start_time: formattedDate, end_time: formattedDate, page_size: 10, page_no: 1 }\n          }),\n          axios.get('http://127.0.0.1:8000/top_performing_creators', {\n            params: { start_time: formattedDate, end_time: formattedDate, page_size: 10, page_no: 1 }\n          }),\n          axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n            params: { start_time: formattedDate, end_time: formattedDate, page_size: 10, page_no: 1 }\n          }),\n          axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n            params: { start_time: formattedDate, end_time: formattedDate, page_size: 10, page_no: 1 }\n          })\n        ]);\n\n        customData.push({\n          date: formattedDate,\n          totalGmv: performanceResponse.data.gmv || 0,\n          flashSalesPerformance: flashSalesResponse.data.total_sales || 0,\n          topPerformingCreators: creatorsResponse.data.top_creators?.length || 0,\n          gmvPerVideo: gmvPerVideoResponse.data.gmv || 0,\n          refundRate: refundRateResponse.data.refund_rate || 0,\n          tiktokCampaign: performanceResponse.data.gmv || 0 // Using same GMV data for TikTok campaign\n        });\n      }\n\n      setCustomRangeData(customData);\n    } catch (error) {\n      console.error('Error fetching custom range data:', error);\n    }\n  };\n\n  const generateDateRange = (startDate, endDate) => {\n    const dates = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    \n    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\n      dates.push(new Date(d));\n    }\n    \n    return dates;\n  };\n\n  // Helper function to format dates as 'YYYY-MM-DD'\n  const formatDate = (date) => {\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  };\n\n  // Helper function to get the start of the current week (Monday)\n  const getStartOfWeek = (date) => {\n    const startOfWeek = new Date(date);\n    const day = startOfWeek.getDay();\n    const diff = startOfWeek.getDate() - day + (day === 0 ? -6 : 1);\n    startOfWeek.setDate(diff);\n    return formatDate(startOfWeek);\n  };\n\n  // Helper function to get the start of the current month\n  const getStartOfMonth = (date) => {\n    const startOfMonth = new Date(date);\n    startOfMonth.setDate(1);\n    return formatDate(startOfMonth);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const currentDate = new Date();\n\n        // Get yesterday's date\n        const yesterday = new Date(currentDate);\n        yesterday.setDate(currentDate.getDate() - 1);\n        const formattedYesterday = formatDate(yesterday);\n\n        // Get start and end of current week\n        const startOfWeek = getStartOfWeek(currentDate);\n        const formattedEndOfWeek = formatDate(new Date(currentDate));\n\n        // Get start of the current month\n        const startOfMonth = getStartOfMonth(currentDate);\n        const formattedEndOfMonth = formatDate(currentDate);\n\n        // Fetch performance data for yesterday\n        const yesterdayPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current week\n        const currentWeekPerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch performance data for the current month\n        const monthToDatePerformanceResponse = await axios.get('http://127.0.0.1:8000/shop/performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        \n        // Fetch flash sales performance \n        const yesterdayflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const currentWeekflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const monthToDateflashsales = await axios.get('http://127.0.0.1:8000/flash_sales_performance', {\n          params: {\n            start_time: startOfMonth,\n            end_time: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Fetch top-performing creators for each period\n        const dailycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weaklycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlycreatorsResponse = await axios.get('http://127.0.0.1:8000/top_performing_creators', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        const dailygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlygmvPervideo = await axios.get('http://127.0.0.1:8000/Gmv_per_video', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const dailyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: formattedYesterday,\n            end_time: formattedYesterday,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const weeklyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_time: startOfWeek,\n            end_time: formattedEndOfWeek,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n        const monthlyRefundrate = await axios.get('http://127.0.0.1:8000/calculate_refund_rate', {\n          params: {\n            start_date: startOfMonth,\n            end_date: formattedEndOfMonth,\n            page_size: 10,\n            page_no: 1\n          }\n        });\n\n        // Update the dashboard state with the fetched data\n        setYesterdayData({\n          totalGmv: yesterdayPerformanceResponse.data.gmv || 0,\n          flashSalesPerformance: yesterdayflashsales.data.total_sales || 0,\n          topPerformingCreators: dailycreatorsResponse.data.top_creators?.length || 0,\n          gmvpervideo: dailygmvPervideo.data.gmv || 0,\n          refundrate: dailyRefundrate.data.refund_rate || 0,\n          Tiktokcompaign: yesterdayPerformanceResponse.data.gmv || 0\n        });\n\n        setCurrentWeekData({\n          totalGmv: currentWeekPerformanceResponse.data.gmv || 0,\n          flashSalesPerformance: currentWeekflashsales.data.total_sales || 0,\n          topPerformingCreators: weaklycreatorsResponse.data.top_creators?.length || 0,\n          gmvpervideo: weeklygmvPervideo.data.gmv || 0,\n          refundrate: weeklyRefundrate.data.refund_rate || 0,\n          Tiktokcompaign: currentWeekPerformanceResponse.data.gmv || 0\n        });\n\n        setMonthToDateData({\n          totalGmv: monthToDatePerformanceResponse.data.gmv || 0,\n          flashSalesPerformance: monthToDateflashsales.data.total_sales || 0,\n          topPerformingCreators: monthlycreatorsResponse.data.top_creators?.length || 0,\n          gmvpervideo: monthlygmvPervideo.data.gmv || 0,\n          refundrate: monthlyRefundrate.data.refund_rate || 0,\n          Tiktokcompaign: monthToDatePerformanceResponse.data.gmv || 0\n        });\n\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2\n    }).format(amount || 0);\n  };\n\n  const calculatePercentage = (value, total) => {\n    if (total === 0) return '0.0%';\n    return ((value / total) * 100).toFixed(1) + '%';\n  };\n\n  const renderTable = (data, title, period, bgColor) => (\n    <div className=\"analytics-table\">\n      <div className={`table-header ${bgColor}`}>\n        <h3>{title}</h3>\n        <span className=\"period\">{period}</span>\n      </div>\n      <div className=\"table-content\">\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">TOTAL GMV</span>\n          <span className=\"metric-value\">{formatCurrency(data.totalGmv)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">FLASH SALES PERFORMANCE</span>\n          <span className=\"metric-value\">{formatCurrency(data.flashSalesPerformance)}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">TOP-PERFORMING CREATORS</span>\n          <span className=\"metric-value\">{data.topPerformingCreators}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">GMV PER VIDEO</span>\n          <span className=\"metric-value\">{data.gmvpervideo}</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Refund Rate</span>\n          <span className=\"metric-value\">{data.refundrate}%</span>\n        </div>\n        <div className=\"metric-row\">\n          <span className=\"metric-label\">Tiktok Campaign outcome</span>\n          <span className=\"metric-value\">{formatCurrency(data.Tiktokcompaign)}</span>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCustomRangeTable = () => {\n    if (customRangeData.length === 0) return null;\n\n    const metrics = [\n      { key: 'totalGmv', label: 'TOTAL GMV', format: 'currency' },\n      { key: 'flashSalesPerformance', label: 'FLASH SALES PERFORMANCE', format: 'currency' },\n      { key: 'topPerformingCreators', label: 'TOP-PERFORMING CREATORS', format: 'number' },\n      { key: 'gmvPerVideo', label: 'GMV PER VIDEO', format: 'number' },\n      { key: 'refundRate', label: 'REFUND RATE', format: 'percentage' },\n      { key: 'tiktokCampaign', label: 'TIKTOK CAMPAIGN OUTCOME', format: 'currency' }\n    ];\n\n    const formatValue = (value, format) => {\n      switch (format) {\n        case 'currency':\n          return formatCurrency(value);\n        case 'percentage':\n          return `${value || 0}%`;\n        case 'number':\n        default:\n          return value || 0;\n      }\n    };\n\n    return (\n      <div className=\"custom-range-table-container\">\n        <div className=\"table-header header-purple\">\n          <h3>Custom Date Range Analysis</h3>\n          <span className=\"period\">\n            {dates.startDate} to {dates.endDate}\n          </span>\n        </div>\n        <div className=\"custom-table-wrapper\">\n          <table className=\"custom-range-table\">\n            <thead>\n              <tr>\n                <th className=\"metric-header\">Metrics</th>\n                {customRangeData.map((dayData) => (\n                  <th key={dayData.date} className=\"date-header\">\n                    {new Date(dayData.date).toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric'\n                    })}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {metrics.map((metric) => (\n                <tr key={metric.key}>\n                  <td className=\"metric-label-cell\">\n                    <strong>{metric.label}</strong>\n                  </td>\n                  {customRangeData.map((dayData) => (\n                    <td key={`${metric.key}-${dayData.date}`} className=\"metric-value-cell\">\n                      {formatValue(dayData[metric.key], metric.format)}\n                    </td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"dashboard-container\">   \n      <div className=\"tables-container\">\n        {renderTable(\n          yesterdayData,\n          'Yesterday',\n          `Yesterday (${formatDate(new Date(Date.now() - 24 * 60 * 60 * 1000))})`,\n          'header-blue'\n        )}\n        {renderTable(\n          currentWeekData,\n          'Current Week',\n          `Week (${getStartOfWeek(new Date())} - ${formatDate(new Date())})`,\n          'header-green'\n        )}\n        {renderTable(\n          monthToDateData,\n          'Month to date',\n          `Month (${getStartOfMonth(new Date())} - ${formatDate(new Date())})`,\n          'header-red'\n        )}\n      </div>\n\n      {/* Date Picker and Custom Range Table Section */}\n      <div className=\"custom-analysis-section\">\n        <div className=\"date-picker-section\">\n          <h2>Custom Date Range Analysis</h2>\n          <DatePickerCard onDatesChange={setDates} />\n          <button\n            className=\"fetch-button\"\n            onClick={fetchPerformance}\n            disabled={!dates.startDate || !dates.endDate || isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Analyze Date Range'}\n          </button>\n        </div>\n\n        {renderCustomRangeTable()}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}