

# import time
# import hmac
# import hashlib
# from urllib.parse import urlparse, parse_qs, urlencode
# import os , json
# from fastapi import FastAPI, HTTPException, Body
# import requests
# from dotenv import load_dotenv
# from typing import Optional
# from fastapi import Path
# load_dotenv()

# APP_KEY = os.getenv("APP_KEY")
# APP_SECRET = os.getenv("APP_SECRET")
# ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")

# BASE_URL = "https://open-api.tiktokglobalshop.com"
# API_PATH = "/api/products/brands"

# app = FastAPI()

# def generate_signature(request_method: str, url: str, headers: dict, body: Optional[str], app_secret: str) -> str:
#     # Parse URL path and query parameters
#     parsed_url = urlparse(url)
#     path = parsed_url.path
#     query_params = parse_qs(parsed_url.query)

#     # Filter out 'sign' and 'access_token'
#     filtered_params = {k: v[0] for k, v in query_params.items() if k not in ('sign', 'access_token')}

#     # Sort keys alphabetically
#     sorted_keys = sorted(filtered_params.keys())

#     # Build string: path + key+value (no delimiters)
#     param_str = path
#     for key in sorted_keys:
#         param_str += key + filtered_params[key]

#     # Append body if content-type not multipart/form-data and body exists
#     content_type = headers.get("Content-Type", "")
#     if content_type.lower() != "multipart/form-data" and body:
#         param_str += body

#     # Wrap with secret before and after
#     signature_base = app_secret + param_str + app_secret

#     # HMAC SHA256 hex digest
#     signature = hmac.new(
#         app_secret.encode("utf-8"),
#         signature_base.encode("utf-8"),
#         hashlib.sha256
#     ).hexdigest()

#     return signature

# def build_signed_url():
#     timestamp = str(int(time.time()))

#     # Construct params dictionary
#     params = {
#         "access_token": ACCESS_TOKEN,
#         "app_key": APP_KEY,
#         "shop_cipher": "TTP_ZxmgLgAAAAAdwMla_v60G1uDro76Xyg8",  # Replace with your shop_cipher
#         "shop_id": "7496217208817354793",                     # Replace with your shop_id
#         "timestamp": timestamp,
#         "version": "202212",
#     }

#     # Build the base URL without sign
#     base_url = f"{BASE_URL}{API_PATH}?{urlencode(params)}"

#     # Generate signature like Java code using full URL and headers (no body on GET)
#     headers = {
#         "Content-Type": "application/json"
#     }
#     sign = generate_signature("GET", base_url, headers, None, APP_SECRET)

#     # Append sign param
#     params["sign"] = sign

#     # Build final signed URL
#     signed_url = f"{BASE_URL}{API_PATH}?{urlencode(params)}"
#     return signed_url

# @app.get("/getbrands")
# def get_brands():
#     url = build_signed_url()

#     headers = {
#         "x-tts-access-token": ACCESS_TOKEN,
#         "Content-Type": "application/json"
#     }

#     response = requests.get(url, headers=headers)
#     if response.status_code != 200:
#         raise HTTPException(status_code=response.status_code, detail=response.text)

#     return response.json()

# @app.get("/return_records/{version}/{return_id}")
# def get_return_records(
#     version: str = Path(..., description="API version, e.g. '202309'"),
#     return_id: str = Path(..., description="Return ID to fetch records for")
# ):
#     path = f"/return_refund/{version}/returns/{return_id}/records"
#     timestamp = str(int(time.time()))

#     params = {
#         "access_token": ACCESS_TOKEN,
#         "app_key": APP_KEY,
#         "timestamp": timestamp,
#         "version": version,
#     }

#     base_url = f"{BASE_URL}{path}?{urlencode(params)}"
#     headers = {
#         "Content-Type": "application/json"
#     }

#     sign = generate_signature("GET", base_url, headers, None, APP_SECRET)
#     params["sign"] = sign

#     signed_url = f"{BASE_URL}{path}?{urlencode(params)}"
#     headers["x-tts-access-token"] = ACCESS_TOKEN

#     response = requests.get(signed_url, headers=headers)
#     if response.status_code != 200:
#         raise HTTPException(status_code=response.status_code, detail=response.text)

#     return response.json()

# @app.post("/affiliate_creator/search")
# def search_affiliate_collaborations(payload: dict = Body(...)):
#     """
#     Calls TikTok API to search affiliate collaborations.
#     Expects JSON payload in the POST body.
#     """
#     api_path = "/affiliate_creator/202405/target_collaborations/search"
#     timestamp = str(int(time.time()))

#     params = {
#         "access_token": ACCESS_TOKEN,
#         "app_key": APP_KEY,
#         "timestamp": timestamp,
#         "version": "202212",
#         "page_size": "10",
#         "page_no": "1",
#         "shop_id":"12345678987654"
#     }

#     base_url = f"{BASE_URL}{api_path}?{urlencode(params)}"
#     headers = {
#         "Content-Type": "application/json",
#     }

#     # Generate signature based on URL and body
#     sign = generate_signature("POST", base_url, headers, json.dumps(payload), APP_SECRET)
#     params["sign"] = sign

#     signed_url = f"{BASE_URL}{api_path}?{urlencode(params)}"
#     headers["x-tts-access-token"] = ACCESS_TOKEN

#     response = requests.post(signed_url, headers=headers, json=payload)
#     if response.status_code != 200:
#         raise HTTPException(status_code=response.status_code, detail=response.text)

#     return response.json()


# @app.get("/marketplace_creators/{creator_user_id}")
# def get_marketplace_creator(creator_user_id: str = Path(..., description="Creator user ID")):
#     api_path = f"/affiliate_seller/202505/marketplace_creators/{creator_user_id}"
#     timestamp = str(int(time.time()))

#     params = {
#         "access_token": ACCESS_TOKEN,
#         "app_key": APP_KEY,
#         "timestamp": timestamp,
#         "version": "202212",
#     }

#     base_url = f"{BASE_URL}{api_path}?{urlencode(params)}"
#     headers = {
#         "Content-Type": "application/json"
#     }

#     sign = generate_signature("GET", base_url, headers, None, APP_SECRET)
#     params["sign"] = sign

#     signed_url = f"{BASE_URL}{api_path}?{urlencode(params)}"
#     headers["x-tts-access-token"] = ACCESS_TOKEN

#     response = requests.get(signed_url, headers=headers)
#     if response.status_code != 200:
#         raise HTTPException(status_code=response.status_code, detail=response.text)

#     return response.json()



# @app.post("/post/publish/status/fetch/")
# def fetch_publish_status(payload: dict = Body(...)):
#     api_path = "/v2/post/publish/status/fetch/"
#     timestamp = str(int(time.time()))

#     params = {
#         "access_token": ACCESS_TOKEN,
#         "app_key": APP_KEY,
#         "timestamp": timestamp,
#         "version": "202212",  # adjust version if needed
#     }

#     base_url = f"{BASE_URL}{api_path}?{urlencode(params)}"
#     headers = {
#         "Content-Type": "application/json",
#     }

#     import json
#     # Generate signature including POST body
#     sign = generate_signature("POST", base_url, headers, json.dumps(payload), APP_SECRET)
#     params["sign"] = sign

#     signed_url = f"{BASE_URL}{api_path}?{urlencode(params)}"
#     headers["x-tts-access-token"] = ACCESS_TOKEN

#     response = requests.post(signed_url, headers=headers, json=payload)
#     if response.status_code != 200:
#         raise HTTPException(status_code=response.status_code, detail=response.text)

#     return response.json()



{
  "code": 0,
  "data": {
    "orders": [
      {
        "id": "576461413038785752",
        "cancellation_initiator": "SELLER",
        "shipping_provider": "TT Virtual express",
        "shipping_provider_id": "6617675021119438849",
        "user_id": "7021436810468230477",
        "status": "UNPAID",
        "rts_time": 1619611563,
        "payment": {
          "currency": "IDR",
          "sub_total": "5000",
          "shipping_fee": "5000",
          "seller_discount": "5000",
          "platform_discount": "5000",
          "total_amount": "5000",
          "original_total_product_price": "5000",
          "original_shipping_fee": "5000",
          "shipping_fee_seller_discount": "5000",
          "shipping_fee_platform_discount": "5000",
          "shipping_fee_cofunded_discount": "7",
          "tax": "5000",
          "small_order_fee": "3000",
          "shipping_fee_tax": "11",
          "product_tax": "21.3",
          "retail_delivery_fee": "1.28",
          "buyer_service_fee": "1000",
          "handling_fee": "1000",
          "shipping_insurance_fee": "1000",
          "item_insurance_fee": "1000"
        },
        "recipient_address": {
          "full_address": "1199 Coleman Ave San Jose, CA 95110",
          "phone_number": "(+1)213-***-1234",
          "name": "David Kong",
          "first_name": "David",
          "last_name": "Kong",
          "first_name_local_script": "ジョン",
          "last_name_local_script": "ドゥ",
          "region_code": "US",
          "postal_code": "95110",
          "address_line1": "TikTok 5800 bristol Pkwy",
          "address_line2": "Suite 100",
          "address_line3": "Vila Olímpia",
          "address_line4": "Avenida Presidente Juscelino Kubitschek",
          "district_info": [
            {
              "address_level_name": "Country",
              "address_name": "United Kingdom",
              "address_level": "L0"
            }
          ],
          "delivery_preferences": {
            "drop_off_location": "Front Door"
          },
          "address_detail": "Unit one building 8"
        },
        "buyer_message": "Please ship asap!",
        "create_time": 1619611561,
        "tracking_number": "JX12345",
        "cancel_reason": "Pricing error",
        "rts_sla_time": 1619611688,
        "paid_time": 1619611563,
        "fulfillment_type": "FULFILLMENT_BY_SELLER",
        "seller_note": "seller note",
        "tts_sla_time": 1619611761,
        "cancel_order_sla_time": 1619621355,
        "update_time": 1619621355,
        "packages": [
          {
            "id": "1152321127278713123"
          }
        ],
        "delivery_type": "HOME_DELIVERY",
        "is_sample_order": false,
        "warehouse_id": "6955005333819123123",
        "split_or_combine_tag": "COMBINED",
        "has_updated_recipient_address": false,
        "cpf": "3213-31231412",
        "delivery_option_id": "7091146663229654785",
        "delivery_sla_time": 1678389618,
        "payment_method_name": "CCDC",
        "shipping_due_time": 1678389618,
        "line_items": [
          {
            "id": "577086512123755123",
            "sku_id": "2729382476852921560",
            "combined_listing_skus": [
              {
                "sku_id": "2729382476852921123",
                "sku_count": 1,
                "product_id": "1729582718312380456",
                "seller_sku": "yellow-24-XL "
              }
            ],
            "product_id": "1729582718312380123",
            "product_name": "Women's Winter Crochet Clothes",
            "sku_name": "Iphone",
            "sku_image": "https://p16-oec-va.itexeitg.com/tos-maliva-d-o5syd03w52-us/46123e87d14f40b69b839",
            "original_price": "0.01",
            "sale_price": "0.01",
            "platform_discount": "0",
            "display_status": "TO_SHIP",
            "cancel_user": "BUYER",
            "sku_type": "PRE_ORDER",
            "seller_sku": "red_iphone_256",
            "shipping_provider_id": "6617675021119438849",
            "seller_discount": "0",
            "currency": "IDR",
            "package_id": "1153132168123859123",
            "rts_time": 1678389618,
            "item_tax": [
              {
                "tax_type": "SALES_TAX",
                "tax_amount": "21.2",
                "tax_rate": "0.35"
              }
            ],
            "package_status": "TO_FULFILL",
            "shipping_provider_name": "TT Virtual express",
            "is_gift": false,
            "cancel_reason": "Discount not as expected",
            "small_order_fee": "5000",
            "retail_delivery_fee": "1.28",
            "tracking_number": "JX12345",
            "buyer_service_fee": "1000",
            "handling_duration_days": "7",
            "is_dangerous_good": true,
            "needs_prescription": true
          }
        ],
        "shipping_type": "TIKTOK",
        "buyer_email": "v2b2V5@chat.seller.tiktok.com",
        "delivery_time": 1678389618,
        "need_upload_invoice": "NEED_INVOICE",
        "is_cod": false,
        "request_cancel_time": 1678389618,
        "delivery_option_required_delivery_time": 1678389618,
        "delivery_option_name": "Express shipping",
        "is_buyer_request_cancel": false,
        "delivery_due_time": 1678389618,
        "collection_time": 1678389618,
        "is_on_hold_order": false,
        "cancel_time": 1678389618,
        "is_replacement_order": false,
        "replaced_order_id": "576461416728782174",
        "collection_due_time": 1678389618,
        "pick_up_cut_off_time": 1678389618,
        "fast_dispatch_sla_time": 1678389618,
        "commerce_platform": "TIKTOK_SHOP",
        "order_type": "ZERO_LOTTERY",
        "release_date": 1619611762,
        "handling_duration": {
          "days": "7",
          "type": "BUSINESS_DAY"
        },
        "auto_combine_group_id": "12345677",
        "cpf_name": "John Smith",
        "is_exchange_order": false,
        "exchange_source_order_id": "576461413038785752",
        "consultation_id": "123241",
        "fast_delivery_program": "3_DAY_DELIVERY"
      }
    ]
  },
  "message": "Success",
  "request_id": "202203070749000101890810281E8C70B7"
}